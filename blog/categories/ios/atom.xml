<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Syntax Error]]></title>
  <link href="http://andreamazz.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://andreamazz.github.io/"/>
  <updated>2014-01-25T15:55:55+01:00</updated>
  <id>http://andreamazz.github.io/</id>
  <author>
    <name><![CDATA[Andrea Mazzini]]></name>
    <email><![CDATA[andrea.mazzini@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configuring Alljoyn on iOS]]></title>
    <link href="http://andreamazz.github.io/blog/2014/01/25/configuring-alljoyn-on-ios/"/>
    <updated>2014-01-25T11:29:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/01/25/configuring-alljoyn-on-ios</id>
    <content type="html"><![CDATA[<p>Have you ever played <a href="http://www.sleepingbeastgames.com/spaceteam/">Spaceteam</a> on <a href="https://play.google.com/store/apps/details?id=com.sleepingbeastgames.spaceteam">Android</a> or <a href="https://itunes.apple.com/it/app/spaceteam/id570510529?mt=8">iOS</a>? It&rsquo;s a local (cross-platform) multiplayer only game, based on a really cool concept. The players are&hellip; <em>you guessed it&hellip;</em> a space team, and they need to cooperate to keep the spaceship they are traveling on intact through space. This means that you&rsquo;ll be <a href="http://penny-arcade.com/comic/2012/12/31">shouting at your friends</a> commands, and activating various weirdly named knobs and switches.<br/>
While I was researching the tech behind it, I stumbled upon <a href="https://www.alljoyn.org/">Alljoyn</a>, by Qualcomm.</p>

<!-- More -->


<p>Spaceteam uses <a href="https://github.com/tolo/HHServices">HHServices</a> and <a href="https://github.com/roustem/AsyncSocket">AsyncSocket</a>, so the networking protocol was built almost from the ground up by <a href="https://twitter.com/hengineer">its creator</a>. Alljoyn on the other hand promises an opensource <em>&ldquo;universal (cross-platform) software framework that enables interoperability among connected products and software applications across manufacturers to create dynamic proximal networks.&rdquo;</em> And I&rsquo;m all for that.<br/>
The cool thing about it is its ability to seamlessly operate over wifi or over bluetooth (losing the cross-platform ability).
If you login on the Alljoyn site you&rsquo;ll come across the free, opensource, SDK and a bunch of samples. I downloaded the iOS SDK, and started working on my sample.<br/>
What I found out is that the walkthroughs and guides are either not up to date or just wrong. So I figured I could write down what I did to make everything work.<br/>
In this day and age, where cocoapods eases our mind when we need to integrate a third party library, it was a harsh throwback in the world of missing headers and wrong architecture builds.</p>

<h4>Compiling openssl</h4>

<p>If you take a look at Alljoyn&rsquo;s SDK readme you&rsquo;ll notice that the first thing you need to do is compile Openssl for iOS. That&rsquo;s quite easy, and fairly well documented, just head to <a href="https://github.com/sqlcipher/openssl-xcode">Github and clone the openssl-xcode project</a>.<br/>
As stated in the readme you need to download the <a href="http://www.openssl.org/source/">openssl sources</a> and place them in your openssl-xcode project.<br/>
That&rsquo;s how the folder structure should look:</p>

<p><img class="center" src="/images/posts/2014-01-25/openssl.png" width="760" height="550" title="&lsquo;openssl&rsquo;" ></p>

<p>To compile it just open the .xcodeproj file and use XCode&rsquo;s Product &ndash;> Build For &ndash;> Release, or stay in your terminal window and compile it with xctool or xcodebuild, either:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcodebuild -project openssl.xcodeproj -scheme crypto</span></code></pre></td></tr></table></div></figure></notextile></div>
or:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xctool -project openssl.xcodeproj -scheme crypto</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;ll find the built library in your derived data:</p>

<p><img class="center" src="/images/posts/2014-01-25/derived-data.png" title="&lsquo;built openssl&rsquo;" ></p>

<p>Just grab <code>Debug-iphoneos</code> and <code>Debug-iphonesimulator</code>, and place them under a <code>build</code> folder, inside your openssl sources. It should look something like this:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>â˜º   ~/openssl/build ll
</span><span class='line'>drwxr-xr-x  5 Andrea  staff  170 21 Gen 23:26 Debug
</span><span class='line'>drwxr-xr-x  5 Andrea  staff  170 21 Gen 23:28 Debug-iphoneos
</span><span class='line'>drwxr-xr-x  5 Andrea  staff  170 21 Gen 23:28 Debug-iphonesimulator</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Cool, now download and unzip the Alljoyn&rsquo;s SDK.</p>

<h4>New Alljoyn project</h4>

<p>With that out of the way it&rsquo;s time to start working on our project. Fire up Xcode and create a new project.</p>

<h5>Object Model</h5>

<p>We&rsquo;ll start by creating the object that will travel the bus. Alljoyn uses its own XML format to define the object structure. I&rsquo;m not a fan of this format, but that&rsquo;s what we have to work with:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Object model </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span>?&gt;
</span><span class='line'><span class="nt">&lt;xml&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>node name=&quot;org/alljoyn/Bus/sample&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>annotation name=&quot;org.alljoyn.lang.objc&quot; value=&quot;SampleObject&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>interface name=&quot;org.alljoyn.bus.sample&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>annotation name=&quot;org.alljoyn.lang.objc&quot; value=&quot;SampleObjectDelegate&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>method name=&quot;Concatentate&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>arg name=&quot;str1&quot; type=&quot;s&quot; direction=&quot;in&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>annotation name=&quot;org.alljoyn.lang.objc&quot; value=&quot;concatenateString:&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/arg<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>arg name=&quot;str2&quot; type=&quot;s&quot; direction=&quot;in&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>annotation name=&quot;org.alljoyn.lang.objc&quot; value=&quot;withString:&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/arg<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>arg name=&quot;outStr&quot; type=&quot;s&quot; direction=&quot;out&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/method<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/interface<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/node<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/xml&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is the basic object that you&rsquo;ll find in the official guide, it defines a simple method that returns two input strings concatenated:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&ndash; (NSString&lt;em>)concatenateString:(NSString&lt;/em>)str1 withString:(NSString*)str2;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Cool, now we should run the code generator bundled in the Alljoyn&rsquo;s SDK to generate the Objective-c code.
The generator needs to be compiled, so we&rsquo;ll do that in a couple of clicks.</p>

<h6>Compiling the generator</h6>

<p>Building the generator is pretty straightforward, just head to <code>&lt;AllJoyn SDK Root&gt;/alljoyn_objc/AllJoynCodeGenerator</code> and build with XCode the AllJoynCodeGenerator.xcproj. This will create a /bin folder with the generator excecutable file.</p>

<p>Now the good Alljoyn folks suggest to setup a new target that will allow us to generate with XCode the code. Since I like to keep my targets tidy, and since we have a perfectly fine console, I just skip this step and go the old fashioned way. Just copy the bin/AllJoynCodeGenerator wherever you like, as well with our trusty XML object, and run:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./AllJoynCodeGenerator sample_object.xml</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will generate:</p>

<pre><code>AJNSampleObject.h
AJNSampleObject.mm
SampleObject.h
SampleObject.m
</code></pre>

<p>Copy these file to your project and add them to your target.</p>

<h5>Build settings</h5>

<p>Now the fun part. We&rsquo;ll need to configure the build settings of our project. What I really like to do is move the AllJoyn&rsquo;s SDK bins and openssl build in the project&rsquo;s root. Two reasons for that:</p>

<ul>
<li><p>I don&rsquo;t have to configure environment variables and link the relative paths</p></li>
<li><p>The project is self contained, so everyone can just clone the project and compile it without firther hassles</p></li>
</ul>


<p>So, here&rsquo;s my folder structure:</p>

<pre><code>â˜º   ~/code/git/alljoynsample ll
drwxr-xr-x  16 Andrea  staff  544 25 Gen 15:14 AlljoynSample
drwxr-xr-x   5 Andrea  staff  170 25 Gen 15:14 AlljoynSample.xcodeproj
drwxr-xr-x   5 Andrea  staff  170 25 Gen 15:14 AlljoynSampleTests
drwxr-xr-x   5 Andrea  staff  170 25 Gen 15:14 alljoyn-sdk
drwxr-xr-x   4 Andrea  staff  136 25 Gen 15:14 openssl
</code></pre>

<p>Remmeber to remove the unused samples and openssl sources.</p>

<p>Next step, head to your project&rsquo;s build settings tab, and set <code>Build Active Architecture Only</code> to YES.</p>

<p>Below that field, look for <code>Other Linker Flags</code> and set it to <code>-lalljoyn -lajdaemon -lBundledDaemon.o -lssl -lcrypto</code>.</p>

<p>That&rsquo;s where I needed to stop following the official guide, since the path described are wrong.
Head to the <code>Header Search Paths</code> field and enter these:</p>

<pre><code>$(inherited)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
"$(SRCROOT)/alljoyn-sdk/alljoyn_core/build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/inc"
"$(SRCROOT)/alljoyn-sdk/alljoyn_core/build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/inc/alljoyn"
</code></pre>

<p>Then in <code>Library Search Paths</code>:</p>

<pre><code>$(inherited)
"$(SRCROOT)/openssl/build/$(CONFIGURATION)-$(PLATFORM_NAME)"
"$(SRCROOT)/alljoyn-sdk/alljoyn_core/build/darwin/$(CURRENT_ARCH)/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/lib"
</code></pre>

<p>The $(CURRENT_ARCH) var was key to make the project compile on armv7s devices. That took a while to figure out.</p>

<p>We can now get back to the official guide, setting <code>Enable C++ Exceptions</code> and <code>Enable C++ Runtime Types</code> to NO.</p>

<p>Add <code>-DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN</code> to <em>Other C Flags</em> Debug and <code>-DNS_BLOCK_ASSERTIONS=1 -DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN</code> to <em>Other C Flags</em> Release.</p>

<h6>Frameworks</h6>

<p>Almost done. We need to take care of the frameworks. Just copy the <code>AllJoynFramework</code> folder from the Alljoyn&rsquo;s SDK in your folder and your project, and make sure to remove the <code>AJNPasswordManager</code> class or you won&rsquo;t be able to compile.
Finish up by linking the static frameworks <code>SystemConfiguration</code> and <code>libstdc++.dylib</code> and we are done.</p>

<p>Hit the trusty <code>âŒ˜B</code> and you should see a succesful build.</p>

<p>Well, that wasn&rsquo;t fun at all, and it sure made me appreciate Cocoapods even more.
Hope this helps anyway.</p>

<p>Until next time.<br/>
Andrea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network Stubs with OHHTTPStubs]]></title>
    <link href="http://andreamazz.github.io/blog/2014/01/10/network-stubs-with-ohhttpstubs/"/>
    <updated>2014-01-10T19:42:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/01/10/network-stubs-with-ohhttpstubs</id>
    <content type="html"><![CDATA[<p>This week I found myself implementing the Google Places' API in an iOS application, what better occasion to write a post about my favourite iOS stub framework, <a href="https://github.com/AliSoftware/OHHTTPStubs">OHHTTPStubs</a>?</p>

<!-- More -->


<h5>Network stubs</h5>

<p>There are a lot of interesting <a href="http://martinfowler.com/articles/mocksArentStubs.html">articles</a> that explain the philosophy behind stubbing, mocking and their differences. I like the concise definition given by <a href="https://twitter.com/greggpollack">Gregg Pollack</a> in <a href="http://www.codeschool.com/courses/rails-testing-for-zombies">Codeschool&rsquo;s Rails Testing for Zombies</a>:
<blockquote><p>Stubs replace a method with code that returns a specified result, mocks are stubs with an assertion that the method gets called.</p></blockquote>
That being said, when testing network code, stubs are <em>really</em> useful tools to avoid hitting a network resource each time our tests run. This prevents unwanted traffic (and that&rsquo;s nice when you are dealing with API limits) and speeds up our test suite quite a bit.</p>

<h5>Google Places API</h5>

<p>I won&rsquo;t go further in detail with the Google Places' API, what we need to know is the API&rsquo;s URL and the format of returned JSON object.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>API&rsquo;s URL </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=">https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=&lt;/a>&lt;your_api_key>&amp;location=&lt;lat,lng>&amp;sensor=true&amp;radius=500</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>debug_info: [ ],
</span><span class='line'>html_attributions: [ ],
</span><span class='line'>next_page_token: "ClRHAAAAFwvsXH5hYznZdQOQ61ZCp7gLZmcRVjy3l5OadZe4gdJNrrZb9xocYXTVHnSM3HKjQ41oBM0j7ImXN21Z6guuGMhpRg9fNOlZbN8vHPp1woYSEHZreMp6Y0xJxlpBYpbcslUaFIQravjfeq49dBvwPHGUQzsQwa9p",
</span><span class='line'>results: [
</span><span class='line'>    {
</span><span class='line'>    geometry: {
</span><span class='line'>        location: {
</span><span class='line'>            lat: 37.7815533,
</span><span class='line'>            lng: -122.4156427
</span><span class='line'>        },
</span><span class='line'>        viewport: {
</span><span class='line'>            northeast: {
</span><span class='line'>                lat: 37.7828015,
</span><span class='line'>                lng: -122.4125167
</span><span class='line'>            },
</span><span class='line'>            southwest: {
</span><span class='line'>                lat: 37.7741122,
</span><span class='line'>                lng: -122.4222884
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    },
</span><span class='line'>    icon: "http://maps.gstatic.com/mapfiles/place_api/icons/geocode-71.png",
</span><span class='line'>    id: "b7fa5ebba26a10513d18e1fd50628f082ffbd1a2",
</span><span class='line'>    name: "Civic Center",
</span><span class='line'>    reference: "CrQBoQAAAHvUxRoSt-y3wsF3Cr6JgGO5Y4Q8nWfthCZLFnApqPO9xmy1NnuQnaZ6BqqE9XPbx8rNKBF-IR7R8C8-8O90pkHjcmoUZKtZscZwbuTYa6RLO5ILIl34AGTh8lbB1cdPtt_NXbkQTQg8eiptx_gzYH8BKg8AKWhYFCN5u9xaE9lXENILw2Ngw_TaUoz1DAAwL6s7uLP3nTQIsO5tOVdsGh3dv2F4ZPck2dHBqD3gPHLSEhArD0KzT3KhPbFWq9UII33pGhSBLiwjfI7y3uOwGS8pkCskS6RK8Q",
</span><span class='line'>    types: [
</span><span class='line'>        "neighborhood",
</span><span class='line'>        "political"
</span><span class='line'>    ],
</span><span class='line'>    vicinity: "San Francisco"
</span><span class='line'>    }
</span><span class='line'>]
</span><span class='line'>status: "OK"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
Great, we have a lot of info, but I really need just <code>name</code> and <code>id</code> in this project.</p>

<h5>Writing the test</h5>

<p>Ok, we figured out how to ask Google for directions and we have our JSON response, next up is our test.</p>

<p>In the last blog post I wrote about my iOS test configuration with Specta. In this project though I&rsquo;ll be using <a href="https://github.com/allending/Kiwi">Kiwi</a>, nothing mayor really changes, just the syntax.</p>

<p>Here&rsquo;s the spec:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">fetchSuggestionsForLocation:onSuccess:</span><span class="n">onFailure</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">context</span><span class="p">(</span><span class="s">@&quot;with valid data&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">it</span><span class="p">(</span><span class="s">@&quot;returns an array&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">__block</span> <span class="n">NSArray</span><span class="o">*</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">AMPlacesHelper</span> <span class="n">sharedHelper</span><span class="p">]</span> <span class="nl">fetchSuggestionsForLocation:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">){</span><span class="mf">37.7749295</span><span class="p">,</span><span class="o">-</span><span class="mf">122.4194155</span><span class="p">}</span> <span class="nl">onSuccess:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="nl">onFailure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{}];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="nl">beKindOfClass:</span><span class="p">[</span><span class="n">NSArray</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">theValue</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">count</span><span class="p">))</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="nl">beGreaterThan:</span><span class="n">theValue</span><span class="p">(</span><span class="mi">0</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span><span class="p">(</span><span class="s">@&quot;returns a JSON array of places with a name and id&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">__block</span> <span class="n">NSArray</span><span class="o">*</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">AMPlacesHelper</span> <span class="n">sharedHelper</span><span class="p">]</span> <span class="nl">fetchSuggestionsForLocation:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">){</span><span class="mf">37.7749295</span><span class="p">,</span><span class="o">-</span><span class="mf">122.4194155</span><span class="p">}</span> <span class="nl">onSuccess:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="nl">onFailure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{}];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">@&quot;name&quot;</span><span class="p">])</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beNonNil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">@&quot;id&quot;</span><span class="p">])</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beNonNil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">context</span><span class="p">(</span><span class="s">@&quot;with invalid data&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">it</span><span class="p">(</span><span class="s">@&quot;returns an error in the failure block&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">__block</span> <span class="n">NSError</span><span class="o">*</span> <span class="n">resultError</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">AMPlacesHelper</span> <span class="n">sharedHelper</span><span class="p">]</span> <span class="nl">fetchSuggestionsForLocation:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">){</span><span class="mf">37.7749295</span><span class="p">,</span><span class="o">-</span><span class="mf">122.4194155</span><span class="p">}</span> <span class="nl">onSuccess:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{}</span> <span class="nl">onFailure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">resultError</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">resultError</span><span class="p">)</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beNonNil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Pretty basic stuff, the first test checks that the returned object is an <code>NSArray</code>, and that its content&rsquo;s lenght is greater than 0. The second test checks for the content itself, making sure that <code>id</code> and <code>name</code> are present. The last spec just checks against invalid data, making sure that an error is raised. <code>expectFutureValue</code> waits 1 seconds (by default) before raising the expectation. This is key when dealing with asyncronous calls.</p>

<p>You may point out that it&rsquo;s always a good practice to limit expectations to one per spec, but since these are pretty basic, I figured I could get away with squeezing two of them in the same spec.</p>

<p>Running the test with my trusty xctool script, I see 3 red specs, yay!</p>

<h5>Stubbing the network</h5>

<p>Now we could implement our code and run the test again, hoping for green, but once we manage to make the network call, we&rsquo;ll be hitting the Google Places' API once for every test run. That&rsquo;s bad, so here enters <a href="https://github.com/AliSoftware/OHHTTPStubs">OHHTTPStubs</a>.</p>

<p>OHHTTPStubs is pretty cool, it lets you register a stub that will listen for any network request and respond with a preset response body and response code. This means that we can easily emulate the network API&rsquo;s behaviour and use it to our likings.
The basic structure of a stub is this one:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="nl">stubRequestsPassingTest:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Here you can decide whether to stub the request or not, based for example on the request URL</span>
</span><span class='line'><span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="nl">withStubResponse:</span><span class="o">^</span><span class="n">OHHTTPStubsResponse</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Here you return the fake data from your stubbed network call</span>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">OHHTTPStubsResponse</span> <span class="nl">responseWithJSONObject:</span><span class="err">@</span><span class="p">[</span> <span class="s">@&quot;hello&quot;</span> <span class="p">]</span> <span class="nl">statusCode:</span><span class="mi">200</span> <span class="nl">headers:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;Content-Type&quot;</span><span class="o">:</span> <span class="s">@&quot;application/json&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Pretty nifty. Once we described our test we can then tear down the stubs in an <code>afterAll</code> block:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">afterAll</span><span class="p">(</span><span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="n">removeAllStubs</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5>Our fixture</h5>

<p>Since I want to stub the Google Places' API I need to provide a sort of fixture throught OHHTTPStubs. Let&rsquo;s <code>curl</code> the result, and save it to a JSON file that will be served by the stub.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl &lt;a href="https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=">https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=&lt;/a>&lt;your_api_key>&amp;location=&lt;lat,lng>&amp;sensor=true&amp;radius=500 > google_places.json</span></code></pre></td></tr></table></div></figure></notextile></div>
Let&rsquo;s put this file in the test bundle of our iOS application and write the stub for the context <code>with valid data</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">beforeEach</span><span class="p">(</span><span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="nl">stubRequestsPassingTest:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="nl">withStubResponse:</span><span class="o">^</span><span class="n">OHHTTPStubsResponse</span><span class="o">*</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSBundle</span> <span class="o">*</span><span class="n">bundle</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSBundle</span> <span class="nl">bundleForClass:</span><span class="p">[</span><span class="n">self</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">OHHTTPStubsResponse</span> <span class="nl">responseWithFileAtPath:</span><span class="p">[</span><span class="n">bundle</span> <span class="nl">pathForResource:</span><span class="s">@&quot;google_places&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;json&quot;</span><span class="p">]</span>
</span><span class='line'>                                            <span class="nl">statusCode:</span><span class="mi">200</span>
</span><span class='line'>                                               <span class="nl">headers:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;Content-Type&quot;</span><span class="o">:</span> <span class="s">@&quot;application/json&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And for the context <code>with invalid data</code>:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">beforeEach</span><span class="p">(</span><span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="nl">stubRequestsPassingTest:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="nl">withStubResponse:</span><span class="o">^</span><span class="n">OHHTTPStubsResponse</span><span class="o">*</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">OHHTTPStubsResponse</span> <span class="nl">responseWithData:</span><span class="nb">nil</span> <span class="nl">statusCode:</span><span class="mi">500</span> <span class="nl">headers:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We should be set, let&rsquo;s make sure that our test fail in a meaningful way:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;blockquote>&lt;p>xctool -workspace Project.xcworkspace -scheme &lsquo;Project&rsquo; -sdk iphonesimulator test
</span><span class='line'>&hellip;
</span><span class='line'>&lsquo;AMPlacesHelper, fetchSuggestionsForLocationï¼šonSuccessï¼šonFailure, with valid data, returns an array&rsquo; [FAILED], expected subject to be kind of NSArray, got (null)
</span><span class='line'>&lsquo;AMPlacesHelper, fetchSuggestionsForLocationï¼šonSuccessï¼šonFailure, with valid data, returns a JSON array of places with a name and id&rsquo; [FAILED], expected subject not to be nil
</span><span class='line'>&lsquo;AMPlacesHelper, fetchSuggestionsForLocationï¼šonSuccessï¼šonFailure, with invalid data, returns an error in the failure block&rsquo; [FAILED], expected subject not to be nil</span></code></pre></td></tr></table></div></figure></notextile></div>
Nice! We can now implement the code that will let the test pass, but won&rsquo;t hit the network.</p></blockquote>

<h5>From red to green</h5>

<p>Let&rsquo;s implement the code that will pass our test. As always, I used <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> to do a quick GET request to the aforementioned API.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">fetchSuggestionsForLocation:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">)</span><span class="n">coordinates</span> <span class="nl">onSuccess:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSArray</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">))</span><span class="n">success</span> <span class="nl">onFailure:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">error</span><span class="p">))</span><span class="n">failure</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setNetworkActivityIndicatorVisible:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="n">AFHTTPRequestOperationManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPRequestOperationManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;key&quot;</span><span class="o">:</span> <span class="n">kGooglePlacesKey</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">@&quot;location&quot;</span><span class="o">:</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%f,%f&quot;</span><span class="p">,</span> <span class="n">coordinates</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="n">coordinates</span><span class="p">.</span><span class="n">longitude</span><span class="p">],</span>
</span><span class='line'>                         <span class="s">@&quot;sensor&quot;</span><span class="o">:</span> <span class="s">@&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">@&quot;radius&quot;</span><span class="o">:</span> <span class="s">@&quot;500&quot;</span><span class="p">};</span>
</span><span class='line'><span class="p">[</span><span class="n">manager</span> <span class="nl">GET:</span><span class="n">kGooglePlacesURL</span> <span class="nl">parameters:</span><span class="n">params</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setNetworkActivityIndicatorVisible:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">success</span><span class="p">(</span><span class="n">responseObject</span><span class="p">[</span><span class="s">@&quot;results&quot;</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setNetworkActivityIndicatorVisible:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">failure</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">failure</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">failure</span><span class="p">([[</span><span class="n">NSError</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDomain:</span><span class="s">@&quot;googleapi.com&quot;</span> <span class="nl">code:</span><span class="mi">500</span> <span class="nl">userInfo:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;message&quot;</span><span class="o">:</span> <span class="s">@&quot;unable to retrieve places&quot;</span><span class="p">}]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We run our suite again:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;strong> TEST PASSED: 3 passed, 0 failed, 0 errored, 3 total &lt;/strong></span></code></pre></td></tr></table></div></figure></notextile></div>
We&rsquo;re green. We can turn off Wifi and unplug the ethernet cable, the test will pass anyway.</p>

<p>If we want to test the code with the live feed, we can easily switch the return value for <code>stubRequestsPassingTest</code> in our stubs to <code>NO</code>.</p>

<h5>Debugging stubs</h5>

<p>When using OHHTTPStubs there&rsquo;s one caveat&hellip;</p>

<p>While writing the stub, I did manage to sneak a typo in my stub code, so I was trying to load <code>google.places.json</code> instead of <code>google_places.json</code>. Usually you&rsquo;d find this error pretty easilly, but this time I only noticed that every stubbed spec that was previously green, now was failing with this generic error:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Test did not run: the test bundle stopped running or crashed in AMPlacesHelper_FetchSuggestionsForLocationonSuccessonFailure_WithValidData_ReturnsAnArray</span></code></pre></td></tr></table></div></figure></notextile></div>
This can be annoying to debug if you have complex stub and I didn&rsquo;t find any quick solution, beside being careful when writing the stub implementation. I guess that a good rule of thumb here is:
<blockquote><p>keep your stubs as simple as possible</p></blockquote>
This should really apply to every good stub and mock.</p>

<p>Until next time.<br/>
Andrea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Test Setup]]></title>
    <link href="http://andreamazz.github.io/blog/2014/01/06/ios-test-setup/"/>
    <updated>2014-01-06T14:39:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/01/06/ios-test-setup</id>
    <content type="html"><![CDATA[<p>Yesterday I wrote an article with my Rails test setup, so it&rsquo;s right about the time to do the same for iOS. I&rsquo;ll be covering Specta, Expecta and KIF, plus OHHTTPStubs for&hellip; you know&hellip; stubs.</p>

<!-- more -->


<p>First thing first, as you can see from the previous post, I&rsquo;m not really into Cucumber. I have more of a <em>dev-first</em> approach for specs. That&rsquo;s the benefit of working on your own projects: you only have to explain things to yourself, who is usually a pretty cool guy and understands what you&rsquo;re saying. Most of the times at least.
That being said, I&rsquo;m not a fan of the syntax that&rsquo;s <em>behind</em> the nice english-like specs, i.e. lots of regex. Welp!
That brings me to my choice for UI Testing: KIF.
KIF (Keep It Functional) is a pretty neat iOS integration framework, it uses the accessibility attributes embedded in every UIKit object to streamline integration testing. This means that you write your tests in plain old Objective-C, which is a big selling point for me.
Tests won&rsquo;t read in fluid english-like sentences, like they do with Cucumber, but they still remain easy to write and easy to understand, even if your objc-fu is not strong.</p>

<h4>Configuration</h4>

<p>I&rsquo;ll be using <a href="http://www.cocoapods.org/">Cocoapods</a>, of course.
First of all, you should already have a XCTest target ready. Make sure to add another one for the integration tests. I usually callit &lsquo;UI Tests&rsquo;.
Here&rsquo;s the Podfile:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;target &quot;Project&quot; do</span>
</span><span class='line'><span class="sr">    # your pods</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">target &quot;Tests&quot;, :exclusive =&amp;gt; true do</span>
</span><span class='line'><span class="sr">    pod &#39;Specta&#39;</span>
</span><span class='line'><span class="sr">    pod &#39;Expecta&#39;</span>
</span><span class='line'><span class="sr">    pod &#39;OHHTTPStubs&#39;, &#39;~&amp;gt; 3.0.2&#39;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">target &#39;UI Tests&#39;, :exclusive =&amp;gt; true do</span>
</span><span class='line'><span class="sr">    pod &#39;KIF&#39;, &#39;~&amp;gt; 2.0&#39;, :inhibit_warnings =&amp;gt; true</span>
</span><span class='line'><span class="sr">    pod &#39;OHHTTPStubs&#39;, &#39;~&amp;gt; 3.0.2&#39;   </span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5>Feature tests</h5>

<p>After a <code>pod install</code> everything will be ready, so we can <code>open Project.xcworkspace</code>
As for Specta we should already be set, so we can just head to our Tests target and start adding specs. Note that I added also Expecta, to have a RSpec 2 like syntax.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Specta</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">EXP_SHORTHAND</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Expecta</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SpecBegin</span><span class="p">(</span><span class="n">Thing</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">describe</span><span class="p">(</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Something</span> <span class="n">cool</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">it</span><span class="p">(</span><span class="s">@&quot;does something amazing&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SpecEnd</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hit <code>âŒ˜ + U</code> and you should be green.</p>

<h5>Integration tests</h5>

<p>Now, Specta needs no further configurations, but KIF does.
<a href="https://github.com/kif-framework/KIF">KIF documentation</a> suggest to make sure that the Bundle loader and Test Host are correctly configured, but I always found them already set by XCode to the proper values.
Since now XCode ships with XCTest, I had to switch back to <code>octest</code> in the Wrapper Extension property, under Build Settings.
Everything should be ok, let&rsquo;s write a test.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>UselessTest.h</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">KIF</span><span class="o">/</span><span class="n">KIF</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">UselessTest</span> : <span class="nc">KIFTestCase</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>UselessTest.m</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">UselessTest</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">UselessTest</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doSomething</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">tester</span> <span class="nl">tapScreenAtPoint:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">){</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">}];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Again <code>âŒ˜ + U</code> and we are good.</p>

<h3>xctool</h3>

<p><a href="https://github.com/facebook/xctool">xctool</a> is a great way to run your tests outside of xcode, and with much better output than xcodebuild. Using it is quite simple, install it via <a href="http://brew.sh/">homebrew</a>:</p>

<pre><code>brew install xctool
</code></pre>

<p>then run your test with it:</p>

<pre><code>xctool -workspace Project.xcworkspace -scheme Project -sdk iphonesimulator test
</code></pre>

<p>That&rsquo;s it.
Until next time.</p>

<p>Cheers</p>

<p>Andrea</p>
]]></content>
  </entry>
  
</feed>
