<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Syntax Error]]></title>
  <link href="http://andreamazz.github.io/atom.xml" rel="self"/>
  <link href="http://andreamazz.github.io/"/>
  <updated>2014-01-06T17:26:58+01:00</updated>
  <id>http://andreamazz.github.io/</id>
  <author>
    <name><![CDATA[Andrea Mazzini]]></name>
    <email><![CDATA[andrea.mazzini@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Test Setup]]></title>
    <link href="http://andreamazz.github.io/blog/2014/01/06/ios-test-setup/"/>
    <updated>2014-01-06T14:39:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/01/06/ios-test-setup</id>
    <content type="html"><![CDATA[<p>Yesterday I wrote an article with my Rails test setup, so it&rsquo;s right about the time to do the same for iOS. I&rsquo;ll be covering Specta, Expecta and KIF, plus OHHTTPStubs for&hellip; you know&hellip; stubs.</p>

<!-- more -->


<p>First thing first, as you can see from the previous post, I&rsquo;m not really into Cucumber. I have more of a <em>dev-first</em> approach for specs. That&rsquo;s the benefit of working on your own projects: you only have to explain things to yourself, who is usually a pretty cool guy and understands what you&rsquo;re saying. Most of the times at least.
That being said, I&rsquo;m not a fan of the syntax that&rsquo;s <em>behind</em> the nice english-like specs, i.e. lots of regex. Welp!
That brings me to my choice for UI Testing: KIF.
KIF (Keep It Functional) is a pretty neat iOS integration framework, it uses the accessibility attributes embedded in every UIKit object to streamline integration testing. This means that you write your tests in plain old Objective-C, which is a big selling point for me.
Tests won&rsquo;t read in fluid english-like sentences, like they do with Cucumber, but they still remain easy to write and easy to understand, even if your objc-fu is not strong.</p>

<h4>Configuration</h4>

<p>I&rsquo;ll be using <a href="http://www.cocoapods.org/">Cocoapods</a>, of course.
First of all, you should already have a XCTest target ready. Make sure to add another one for the integration tests. I usually callit &lsquo;UI Tests&rsquo;.
Here&rsquo;s the Podfile:</p>

<figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">target</span> <span class="s2">&quot;Project&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># your pods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">target</span> <span class="s2">&quot;Tests&quot;</span><span class="p">,</span> <span class="ss">:exclusive</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;Specta&#39;</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;Expecta&#39;</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;OHHTTPStubs&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.2&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">target</span> <span class="s1">&#39;UI Tests&#39;</span><span class="p">,</span> <span class="ss">:exclusive</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;KIF&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span><span class="p">,</span> <span class="ss">:inhibit_warnings</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;OHHTTPStubs&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.2&#39;</span>  
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Feature tests</h5>

<p>After a <code>pod install</code> everything will be ready, so we can <code>open Project.xcworkspace</code>
As for Specta we should already be set, so we can just head to our Tests target and start adding specs. Note that I added also Expecta, to have a RSpec 2 like syntax.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Specta.h&gt;</span>
</span><span class='line'><span class="cp">#define EXP_SHORTHAND</span>
</span><span class='line'><span class="cp">#import &lt;Expecta.h&gt;    </span>
</span><span class='line'>
</span><span class='line'><span class="n">SpecBegin</span><span class="p">(</span><span class="n">Thing</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">@&quot;Something cool&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">@&quot;does something amazing&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">SpecEnd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hit <code>⌘ + U</code> and you should be green.</p>

<h5>Integration tests</h5>

<p>Now, Specta needs no further configurations, but KIF does.
<a href="https://github.com/kif-framework/KIF">KIF documentation</a> suggest to make sure that the Bundle loader and Test Host are correctly configured, but I always found them already set by XCode to the proper values.
Since now XCode ships with XCTest, I had to switch back to <code>octest</code> in the Wrapper Extension property, under Build Settings.
Everything should be ok, let&rsquo;s write a test.</p>

<figure class='code'><figcaption><span>UselessTest.h</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;KIF/KIF.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">UselessTest</span> : <span class="nc">KIFTestCase</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>UselessTest.m</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;UselessTest.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UselessTest</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomething</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">tester</span> <span class="nl">tapScreenAtPoint:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">){</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again <code>⌘ + U</code> and we are good.</p>

<h3>xctool</h3>

<p><a href="https://github.com/facebook/xctool">xctool</a> is a great way to run your tests outside of xcode, and with much better output than xcodebuild. Using it is quite simple, install it via <a href="http://brew.sh/">homebrew</a>:</p>

<pre><code>brew install xctool
</code></pre>

<p>then run your test with it:</p>

<pre><code>xctool -workspace Project.xcworkspace -scheme Project -sdk iphonesimulator test
</code></pre>

<p>That&rsquo;s it.
Until next time.</p>

<p>Cheers</p>

<p>Andrea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Test setup]]></title>
    <link href="http://andreamazz.github.io/blog/2014/01/05/rails-test-setup/"/>
    <updated>2014-01-05T19:20:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/01/05/rails-test-setup</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s how I usually setup my test environment on Rails. I&rsquo;m using mainly RSpec and Capybara, so nothing new under the sun, but this should provide a mindless copy and paste to get you (mainly me) started.</p>

<!-- more -->


<p>First of all, the gems used. This configuration is in part taken from the book <a href="https://leanpub.com/everydayrailsrspec">&ldquo;Testing with RSpec&rdquo;</a> by Aaron Summer:</p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span> <span class="k">if</span> <span class="no">RUBY_PLATFORM</span> <span class="o">=~</span> <span class="sr">/darwin/i</span> <span class="c1"># only on OSX</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;shoulda-matchers&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;faker&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;poltergeist&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>  <span class="c1"># DatabaseCleaner required to test user authentication protected routes</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;launchy&#39;</span> <span class="c1"># Provides the awesome save_and_open_page method in your capybara specs</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A pretty basic setup, RSpec with shoulda matchers, FactoryGirl + Faker for cool mocks and Capybara with Poltergeist as webdriver.</p>

<p>You might want to install PhantomJS (used by Poltergeist). In Mac OSX you can just use brew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install phantomjs</span></code></pre></td></tr></table></div></figure>


<p>With that out of the way the next step is to setup RSpec</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g rspec:install</span></code></pre></td></tr></table></div></figure>


<p>I like to customize rspec with the dotted (or the <code>documentation</code> if I&rsquo;m feeling verbose) and colored notation by adding a .rspec file.</p>

<figure class='code'><figcaption><span>.rspec </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--color --format progress</span></code></pre></td></tr></table></div></figure>


<p>Then I&rsquo;ll customize the generators:</p>

<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">generators</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">test_framework</span> <span class="ss">:rspec</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">fixtures</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">view_specs</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>    <span class="n">helper_specs</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>    <span class="n">routing_specs</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller_specs</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">request_specs</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">fixture_replacement</span> <span class="ss">:factory_girl</span><span class="p">,</span> <span class="ss">dir</span><span class="p">:</span> <span class="s1">&#39;spec/factories&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see I let the generator create the fixtures (using FactoryGirl) and the controller and routes specs. I create models and request spec manually, and I don&rsquo;t care for view specs.</p>

<p>That&rsquo;s about it for Rails, the next step is to do some adjustments to the spec_helper:</p>

<figure class='code'><figcaption><span>spec/spec_helper_.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../config/environment&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/rails&#39;</span>
</span><span class='line'><span class="c1">#require &#39;rspec/autorun&#39; #removed to support Zeus</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/poltergeist&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/**/*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span><span class="o">.</span><span class="n">check_pending!</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">FactoryGirl</span><span class="p">:</span><span class="ss">:Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">filter_run_excluding</span> <span class="ss">slow</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fixture_path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="o">::</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/fixtures&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:poltergeist</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># DatabaseCleaner required to test user authentication protected routes</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">infer_base_class_for_anonymous_controllers</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="s2">&quot;random&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sets up DatabaseCleaner and the webdriver for Capybara. It also tells  RSpec to skip tests marked as <code>:slow</code>.</p>

<h4>Other goodies</h4>

<p>Almost there, now it&rsquo;s time to setup a couple of tools that makes testing less cumbersome.
First of all, let&rsquo;s setup <a href="https://github.com/guard/guard">Guard</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>guard init rspec</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and that&rsquo;s about it.</p>

<p>Let&rsquo;s finish off by configuring <a href="https://github.com/burke/zeus">Zeus</a> if needed (or wanted). That&rsquo;s pretty straightforward, we just need to change the test environment command in the zeus.json generated by <code>zeus init</code>:</p>

<figure class='code'><figcaption><span>zeus.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;test_environment&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;test_helper&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;test&quot;</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;rspec&quot;</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that should be it, therefore</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">post</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_helpful</span> <span class="c1"># I&#39;m quite the commedian</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open for business]]></title>
    <link href="http://andreamazz.github.io/blog/2013/11/10/open-for-business/"/>
    <updated>2013-11-10T18:55:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2013/11/10/open-for-business</id>
    <content type="html"><![CDATA[<p>Hi everyone. This blog is nothing more than a random collection of thoughts and snippets that might be usefull to other developers and, most of all, will be usefull to <em>future</em> me.</p>

<!-- more -->


<p>I&rsquo;m a software engineer, I work most of my time with Objective-C, but I also like to mix stuff up with Ruby and occasionally Android.  I&rsquo;m a co-founder of <a href="http://www.fancypixel.it">Fancy Pixel</a> where I work as developer. In the past I published some work as <a href="http://www.eflatgames.com">Eflat Games</a>. Also you&rsquo;ll find all my opensource projects on <a href="http://www.github.com/andreamazz">Github</a>.</p>

<p>Cheers,
Andrea.</p>
]]></content>
  </entry>
  
</feed>
