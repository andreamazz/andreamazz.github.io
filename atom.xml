<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Syntax Error]]></title>
  <link href="http://andreamazz.github.io/atom.xml" rel="self"/>
  <link href="http://andreamazz.github.io/"/>
  <updated>2015-02-04T11:03:00+01:00</updated>
  <id>http://andreamazz.github.io/</id>
  <author>
    <name><![CDATA[Andrea Mazzini]]></name>
    <email><![CDATA[andrea@fancypixel.it]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React + Flux Backed by Rails API]]></title>
    <link href="http://andreamazz.github.io/blog/2015/02/04/react-plus-flux-backed-by-rails-api/"/>
    <updated>2015-02-04T11:01:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2015/02/04/react-plus-flux-backed-by-rails-api</id>
    <content type="html"><![CDATA[<p>I’ve been working on a frontend for a project we are developing here at Fancy Pixel. We are embracing what looks like a good habit: slicing what would be a monolithic Rails app in a lightweight backend serving APIs and a frontend consuming them. We did this in the not so distant past using Angular.js. It was all fine and dandy, until it wasn’t. There’s something about it that doesn’t sit right with me, I wouldn’t go in detail, since many others already did, but let’s just say that there’s too much magic involved for my tastes (says the guy using Rails). Magic is fine as long as I can figure out how to tinker with the internals when things go down south. With Angular the effort seems too much, but that’s just personal taste really. Also I can’t deny that the major structural changes introduced in 2.0 were the last nail in the coffin.
I wanted to try something new, something that would enforce a solid architecture of our apps, letting me control the single cogs in the engine. React got a lot of good press in the past months, so I took the chance to dive in. In this three-part post you’ll find pretty much everything I learned by writing a frontend using React, with a vanilla Flux architecture, consuming an API written in Rails.</p>

<p>Read the full article <a href="http://fancypixel.github.io/blog/2015/01/28/react-plus-flux-backed-by-rails-api/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React + Flux Backed by Rails API - Part 2]]></title>
    <link href="http://andreamazz.github.io/blog/2015/01/29/react-plus-flux-backed-by-rails-api-part-2/"/>
    <updated>2015-01-29T10:31:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2015/01/29/react-plus-flux-backed-by-rails-api-part-2</id>
    <content type="html"><![CDATA[<p>This is the second part of &ldquo;React + Flux backed by Rails API&rdquo;, make sure to checkout Part 1.
In part 1 we created our fancy Rails API, setup the authentication and defined a resource for our tiny clone of Medium.
Time to reach the core of this post: the frontend.</p>

<!-- More -->


<h1>Settin up the frontend</h1>

<p>The whole idea behind splitting the backend from the fronted is to treat the web UI as a first class citizen, sitting in its own folder, in its own repo, with no bindings from the backend. The backend can be easily interchanged, as long as the API specs remain consistent. So we&rsquo;ll create a new app from scratch. We have the option to use automated tools like Yeoman, but I wasn&rsquo;t able to find the solution that fit all my need.</p>

<h2>Tools</h2>

<p>I&rsquo;ll be using node&rsquo;s NPM to fetch the main tools, Gulp for the build and watch tasks, and Bower for the resources.
Before diving in the details, I have to warn you, I&rsquo;m awful with gulp, I&rsquo;m still learning, so I pretty much gathered tasks around the web. So take my gulp file lightly, I&rsquo;m planning on fixing all the horrors as soon as I can.
You&rsquo;ll find the package.sjon and gulpfile.js in the sample repo, to make a longstory short we&rsquo;ll be using React.js (obviously), react-router, superagent for the ajax calls and flux. As I said before, Flux is just an architecture, so what am I importing really in my package.json? Turns out that Facebook release a small library called flux that contains basically the code for a Flux Dispatcher (more on that later), that will cut down the amoun of boilerplate code that we&rsquo;ll need to get started.</p>

<h2>Flux Architecture</h2>

<p>If you already took a stab at Flux you might know this diagram:
<img class="center" src="http://andreamazz.github.io/images/posts/2015-01-29/flux.png" width="640" height="320" title="'Flux architecture'" ></p>

<p>It might not be easy to understand at first, but it makes more and more sense while you are implementing all those coloured blocks. Let me shed some light over it.
The leftmost block is our Web API, we built that in the previous part of this blog post, so we are set. Our API will be called by the &ldquo;Web API Utils&rdquo;, that&rsquo;s just a plain JS file making ajax requests. Eventually this JS component will receive an AJAX callback, and needs to update our frontend app. It does that using Actions. An action is just a data sctructure that tells the system what happened and what payload is associated with that action.
There are two types of actions: the one initiaded by a server (e.g.: an AJAX callback) and those initiated by the views (e.g.: the user click a button).
The actions are created through Action Creators, that are really just utility functions that build the action and toss it to the system, or to be more precise, the dispatcher.
the dispatcher is a single object (one per app) that, as the name suggests, dispatches actions to those who registered interest in them. It&rsquo;s just a pub-sub mechanism, plain and simple.
The object that register interest in this actions are called Stores. Stores contain the applciation logic and state. They are similar to a model, but they manage the state of all the objects, not a single record.
Stores are the one offering the state that will be presented by the React views. React views should hold as few state as possible, they should grab the state of the data from a store, and pass the state to their children as props.
That&rsquo;s it really, it seems rather convoluted at first, but an example can clear the fog, let&rsquo;s consider the login process:</p>

<ul>
<li>The user enters his username and password, and clicks Login</li>
<li>The React view handles the click event, grabs the content of the fields and creates an action through an action creator, with the tag <code>LOGIN_REQUEST</code> and a payload with the user&rsquo;s credentials</li>
<li>The Action creator creates the <code>LOGIN_REQUEST</code> with its payload, and alerts the Dispatcher</li>
<li>The Action creator also calls the Web API utils, passing the payload</li>
<li>The Web API Utils perform the AJAX call</li>
<li>The Web API responds authenticating the user, providing the repsonse JSON</li>
<li>The Web API Utils receive the JSON and creates a new action, called LOGIN_RESPONSE, with the JSON as payload.</li>
<li>The dispatcher is notified, and forwards the action to the store(s) that is(are) interesetd in a LOGIN_RESPONSE</li>
<li>The store (e.g.: a SessionStore) gets notified and extracts the payload from the action</li>
<li>The store updates its state (username, auth token and login state set to true)</li>
<li>The store emits its changes</li>
<li>The React views are notified of the changes</li>
<li>The React views can grab the state from the store, and if needed pass the state to their children</li>
</ul>


<p>And that&rsquo;s it. Looks like a lot of work for a simple login, but this pattern can be applied to every action performed by the user or the server. It keeps the main components decoupled, it&rsquo;s easier to maintain, and best of all, everything is tidy, for once.</p>

<p>Ok, that was a mouthful, let&rsquo;s see some code.</p>

<h1>Project stucture</h1>

<p>We&rsquo;ll start with the project structure.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aa.jsx</span></code></pre></td></tr></table></div></figure>


<p>app.jsx will be our mounting point, it will render the app in our html template, nothing fancy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./stores/RouteStore.react.jsx&#39;</span><span class="p">).</span><span class="nx">getRouter</span><span class="p">();</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">React</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Handler</span><span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s our first taste of React and JSX. JSX is a JS extension that lets us write nodes with a syntax similiar to XML. It&rsquo;s optional, but it cleans up the syntax and can be handled with ease by designers.</p>

<h2>Routes</h2>

<p><code>router.jsx</code> holds all of our routes that will be used to instantiate react-router:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-router&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Route</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">.</span><span class="nx">Route</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">DefaultRoute</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">.</span><span class="nx">DefaultRoute</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">SmallApp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./components/SmallApp.react.jsx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">LoginPage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./components/session/LoginPage.react.jsx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">StoriesPage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./components/stories/StoriesPage.react.jsx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">StoryNew</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./components/stories/StoryNew.react.jsx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SignupPage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./components/session/SignupPage.react.jsx&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;app&quot;</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/&quot;</span> <span class="nx">handler</span><span class="o">=</span><span class="p">{</span><span class="nx">SmallApp</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">DefaultRoute</span> <span class="nx">handler</span><span class="o">=</span><span class="p">{</span><span class="nx">StoriesPage</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;login&quot;</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/login&quot;</span> <span class="nx">handler</span><span class="o">=</span><span class="p">{</span><span class="nx">LoginPage</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;signup&quot;</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/signup&quot;</span> <span class="nx">handler</span><span class="o">=</span><span class="p">{</span><span class="nx">SignupPage</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;stories&quot;</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/stories&quot;</span> <span class="nx">handler</span><span class="o">=</span><span class="p">{</span><span class="nx">StoriesPage</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;new-story&quot;</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/stories/new&quot;</span> <span class="nx">handler</span><span class="o">=</span><span class="p">{</span><span class="nx">StoryNew</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/Route&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Route&gt;</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Routes are expressed in JSX syntax, we can specify a name (that will be used to perform transitions and to create links), an handler (the React component that will be mounted when the route is visited) and an optional path (that the user will see in his address bar). As you can see we can also mount routes inside another route in a RESTful way.</p>

<h2>Dispatcher</h2>

<p>The dispatcher is the core of the app really, it&rsquo;s the central hub for our messages (actions). It&rsquo;s also a failry easy component to implement, it&rsquo;s really just boilerplate code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">SmallConstants</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../constants/SmallConstants.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Dispatcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;flux&#39;</span><span class="p">).</span><span class="nx">Dispatcher</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">assign</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;object-assign&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">PayloadSources</span> <span class="o">=</span> <span class="nx">SmallConstants</span><span class="p">.</span><span class="nx">PayloadSources</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">SmallAppDispatcher</span> <span class="o">=</span> <span class="nx">assign</span><span class="p">(</span><span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">(),</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleServerAction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">source</span><span class="o">:</span> <span class="nx">PayloadSources</span><span class="p">.</span><span class="nx">SERVER_ACTION</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">action</span><span class="o">:</span> <span class="nx">action</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleViewAction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">source</span><span class="o">:</span> <span class="nx">PayloadSources</span><span class="p">.</span><span class="nx">VIEW_ACTION</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">action</span><span class="o">:</span> <span class="nx">action</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">SmallAppDispatcher</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are basically defining two main methods that will be used to dispatch a message. We use two instead of one just for semantics: one will handle the dispatch of server-initiated action, the other one the view-initiated actions.<br/>
Beofre proceding to the meat of the implementation we&rsquo;ll take a look at the Constants file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">keyMirror</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;keymirror&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">APIRoot</span> <span class="o">=</span> <span class="s2">&quot;http://localhost:3000&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">APIEndpoints</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">LOGIN</span><span class="o">:</span>          <span class="nx">APIRoot</span> <span class="o">+</span> <span class="s2">&quot;/v1/login&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">REGISTRATION</span><span class="o">:</span>   <span class="nx">APIRoot</span> <span class="o">+</span> <span class="s2">&quot;/v1/users&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">STORIES</span><span class="o">:</span>        <span class="nx">APIRoot</span> <span class="o">+</span> <span class="s2">&quot;/v1/stories&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">PayloadSources</span><span class="o">:</span> <span class="nx">keyMirror</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">SERVER_ACTION</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">VIEW_ACTION</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ActionTypes</span><span class="o">:</span> <span class="nx">keyMirror</span><span class="p">({</span>
</span><span class='line'>    <span class="c1">// Session</span>
</span><span class='line'>    <span class="nx">LOGIN_REQUEST</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">LOGIN_RESPONSE</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Routes</span>
</span><span class='line'>    <span class="nx">REDIRECT</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">LOAD_STORIES</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">RECEIVE_STORIES</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">CREATE_STORY</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">RECEIVE_CREATED_STORY</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just an utility class that holds the constants that we&rsquo;ll use throughout the project, mainly the API endpoint and the types of action that we can perform in our app.
Now, let&rsquo;s talk about the authentication process.</p>

<h1>Authentication</h1>

<p>As explained in the Flux example above, the data flow will be initiaded by the user, that will visit the login page, fill a form with his credentials and click on submit. We&rsquo;ll handle the submit as a <code>VIEW_ACTION</code>, this means that our view will just calla  method of our action creator for the session. Let&rsquo;s take a look at it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ./scripts/actions/SessionActionCreators.react.jsx</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SmallAppDispatcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../dispatcher/SmallAppDispatcher.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SmallConstants</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../constants/SmallConstants.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">WebAPIUtils</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../utils/WebAPIUtils.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ActionTypes</span> <span class="o">=</span> <span class="nx">SmallConstants</span><span class="p">.</span><span class="nx">ActionTypes</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signup</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">passwordConfirmation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SmallAppDispatcher</span><span class="p">.</span><span class="nx">handleViewAction</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">SIGNUP_REQUEST</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">email</span><span class="o">:</span> <span class="nx">email</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">password</span><span class="o">:</span> <span class="nx">password</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">passwordConfirmation</span><span class="o">:</span> <span class="nx">passwordConfirmation</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">WebAPIUtils</span><span class="p">.</span><span class="nx">signup</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">passwordConfirmation</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">login</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SmallAppDispatcher</span><span class="p">.</span><span class="nx">handleViewAction</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">LOGIN_REQUEST</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">email</span><span class="o">:</span> <span class="nx">email</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">password</span><span class="o">:</span> <span class="nx">password</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">WebAPIUtils</span><span class="p">.</span><span class="nx">login</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">logout</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SmallAppDispatcher</span><span class="p">.</span><span class="nx">handleViewAction</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">LOGOUT</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This cover all the user-initiaded action in the context of the session. The login action creator as you can see creates a new ViewAction, attaching a payload with the user&rsquo;s email and password, and then calls the WebAPIUtils.login method. If other components registered their interest in receiving the LOGIN_REQUEST action, the dispatcher would deliver this action right now.<br/>
The login method of our WebAPIUtils class is this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ServerActionCreators</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../actions/ServerActionCreators.react.jsx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;superagent&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">login</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;http://localhost:3002/v1/login&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="nx">username</span><span class="o">:</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="o">:</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">grant_type</span><span class="o">:</span> <span class="s1">&#39;password&#39;</span> <span class="p">})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;Accept&#39;</span><span class="p">,</span> <span class="s1">&#39;application/json&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">errorMsgs</span> <span class="o">=</span> <span class="nx">_getErrors</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">ServerActionCreators</span><span class="p">.</span><span class="nx">receiveLogin</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">errorMsgs</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">ServerActionCreators</span><span class="p">.</span><span class="nx">receiveLogin</span><span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>A common pattern should start to be apparent right now: no class is directly modifying the state of another, but they are just creating new actions. That&rsquo;s the Flux way of handling data in a nutshell.<br/>
To keep things tidy the actions for results of the login process are created in a separate actionc reator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ./scripts/actions/ServerActionCreators.react.jsx</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SmallAppDispatcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../dispatcher/SmallAppDispatcher.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SmallConstants</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../constants/SmallConstants.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ActionTypes</span> <span class="o">=</span> <span class="nx">SmallConstants</span><span class="p">.</span><span class="nx">ActionTypes</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">receiveLogin</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SmallAppDispatcher</span><span class="p">.</span><span class="nx">handleServerAction</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">LOGIN_RESPONSE</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">json</span><span class="o">:</span> <span class="nx">json</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">errors</span><span class="o">:</span> <span class="nx">errors</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">receiveStories</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SmallAppDispatcher</span><span class="p">.</span><span class="nx">handleServerAction</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">RECEIVE_STORIES</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">json</span><span class="o">:</span> <span class="nx">json</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">receiveCreatedStory</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SmallAppDispatcher</span><span class="p">.</span><span class="nx">handleServerAction</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">RECEIVE_CREATED_STORY</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">json</span><span class="o">:</span> <span class="nx">json</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">errors</span><span class="o">:</span> <span class="nx">errors</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this covers the server and view actions for the login process. Who handles the result though? Let&rsquo;s talk about stores.</p>

<h2>Sessionstore</h2>

<p>Stores are like a mix between a model and a controller, they handle the data, the mains tate of the application, feeding the records to the views, while retrieving the data from a server. We are about to see the SessionStore, which keeps track of the current user (and holds his access token, used in the API calls) and listens for the LOGIN_RESPONSE action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">SmallAppDispatcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../dispatcher/SmallAppDispatcher.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SmallConstants</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../constants/SmallConstants.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">assign</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;object-assign&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ActionTypes</span> <span class="o">=</span> <span class="nx">SmallConstants</span><span class="p">.</span><span class="nx">ActionTypes</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">CHANGE_EVENT</span> <span class="o">=</span> <span class="s1">&#39;change&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Load an access token from the session storage, you might want to implement</span>
</span><span class='line'><span class="c1">// a &#39;remember me&#39; using localSgorage</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_accessToken</span> <span class="o">=</span> <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;accessToken&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_email</span> <span class="o">=</span> <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_errors</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">SessionStore</span> <span class="o">=</span> <span class="nx">assign</span><span class="p">({},</span> <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">emitChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">CHANGE_EVENT</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">addChangeListener</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">CHANGE_EVENT</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">removeChangeListener</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">CHANGE_EVENT</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_accessToken</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getAccessToken</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_accessToken</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getEmail</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_email</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getErrors</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_errors</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">SessionStore</span><span class="p">.</span><span class="nx">dispatchToken</span> <span class="o">=</span> <span class="nx">SmallAppDispatcher</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">action</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">LOGIN_RESPONSE</span><span class="o">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">json</span> <span class="o">&amp;&amp;</span> <span class="nx">action</span><span class="p">.</span><span class="nx">json</span><span class="p">.</span><span class="nx">access_token</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">_accessToken</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">json</span><span class="p">.</span><span class="nx">access_token</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">_email</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">json</span><span class="p">.</span><span class="nx">email</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// Token will always live in the session, so that the API can grab it with no hassle</span>
</span><span class='line'>        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">&#39;accessToken&#39;</span><span class="p">,</span> <span class="nx">_accessToken</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="nx">_email</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">_errors</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">errors</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">SessionStore</span><span class="p">.</span><span class="nx">emitChange</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">LOGOUT</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">_accessToken</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">_email</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="s1">&#39;accessToken&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">SessionStore</span><span class="p">.</span><span class="nx">emitChange</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">SessionStore</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That looks like a bunch of code, but most of it is boilerplate, the interesting part is in the .register function. When the store receives the LOGIN_RESPONSE action unpacks the payload and checks wether the login was successfull or not. It then updates its state (that will be accessed by the public properties declared on top of the file) and notifies a change to whomever might be listening (that&rsquo;s why we import node&rsquo;s EventEmitter and merge the class with it).<br/>
Ok, we have the ability to send a view action, we receive the result and store it, cool, now we need to use this store somewhere and show some UI already.</p>

<h2>Application</h2>

<p>Having a store and a state brings up a tricky question: who should listen to its changes and who should use its state? Following the React philosophy we should find the component at the topmost of our view&rsquo;s tree, without bloating the component itself though. As far as session goes I think the best place is the root of our app. The root is the first component that is mounted by the routes, and if you take a look at our routes, that would be SmallApp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ./scripts/components/SmallApp.react.jsx</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">RouteHandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-router&#39;</span><span class="p">).</span><span class="nx">RouteHandler</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Header</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../components/Header.react.jsx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SessionStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../stores/SessionStore.react.jsx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">RouteStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../stores/RouteStore.react.jsx&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getStateFromStores</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="nx">SessionStore</span><span class="p">.</span><span class="nx">isLoggedIn</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">email</span><span class="o">:</span> <span class="nx">SessionStore</span><span class="p">.</span><span class="nx">getEmail</span><span class="p">()</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">SmallApp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">getStateFromStores</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SessionStore</span><span class="p">.</span><span class="nx">addChangeListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_onChange</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">componentWillUnmount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SessionStore</span><span class="p">.</span><span class="nx">removeChangeListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_onChange</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_onChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">getStateFromStores</span><span class="p">());</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;app&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Header</span>
</span><span class='line'>          <span class="nx">isLoggedIn</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">isLoggedIn</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">email</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">RouteHandler</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">SmallApp</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a really simple component that serves as the root layout. If you take a look at the render function you can see that it only renders a React component named Header and then mounts the content of the Router. The header has a couple of properties though (React props to be exact) and we fill them using the SmallApp state. Those props will be accessible from the Header component. The  SmallApp state is obtained by querying the SessionStore.</p>

<h2>LoginPage</h2>

<h2>RegisterPage</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React + Flux Backed by Rails API - Part 1]]></title>
    <link href="http://andreamazz.github.io/blog/2015/01/28/react-plus-flux-backed-by-rails-api/"/>
    <updated>2015-01-28T16:04:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2015/01/28/react-plus-flux-backed-by-rails-api</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working on a frontend for a project we are developing over at Fancy Pixel. We are embracing what looks like a good habit: slicing the monolithic Rails app in a backend serving APIs and a frontend consuming them. We did this in the not so distant past using Angular.js. It was all fine and dandy, until it wasn&rsquo;t. There&rsquo;s something about it that doesn&rsquo;t sit right with me, I wouldn&rsquo;t go in detail, since many others already did, but let&rsquo;s just say that there&rsquo;s too much magic involved for my tastes (says the guy using Rails). I can&rsquo;t deny that the major structural changes introduced in 2.0 were the last nail in the coffin. I wanted to try something new, something that would enforce a solid architecture of my app, letting me control the single parts. React got a lot of good press in the past months, so I took the chance to dive in. Here you&rsquo;ll find pretty much everything I learned by writing a frontend using React, with a vanilla Flux architecture, consuming an API written in Rails.</p>

<!-- More -->


<h2>Choosing the backend</h2>

<p>Given our experience, the obvious choice for us was Rails, but with a twist: rails-api. Rails-api is a stripped down version of Rails, where most of the &lsquo;useless&rsquo; middleware is not included (but you can iclude it if you need it). Using Rails to serve JSON might seem overkill, but the Github page of rails-api has some really good points to counter this argument.</p>

<h2>The frontend technology</h2>

<p>The real meat of this post, I picked React for building the views. React is javascript library for building user interfaces built and open sourced by the Facebook&rsquo;s engineers. Its major selling point is the ability to provide a dynamic and fast way to build isomorphic apps. Isomorphic means that the app can be rendered with ease on both the server and the client, which helps with SEO. I&rsquo;ll be honest, I don&rsquo;t give a flying f&hellip; udge about SEO, I was sold by the Virtual DOM and how the data is organized and handled in React views.
The Virtual DOM is something that we&rsquo;re going to see implemented in other JS frameworks (Ember does that already if I&rsquo;m not mistaken). The views can be rendered on the server for the initial request, than the underliyng tech is going to render subsequent pages in a Virtual DOM, that is then diffed with the actual DOM, and then only the differences are changes in the visible page. And it&rsquo;s fast. Brilliant.</p>

<h2>Flux</h2>

<p>This covers the backend and the views, we&rsquo;re missing something in between, say, an architecture to follow. Flux is an architecture for building web UIs, and works really well in compination with React, but it can really be applied anywhere.</p>

<h2>Here comes trouble</h2>

<p>I never was a big fan of implementing web UI, CSS always gets messy, Javascript files become scary monoliths where crappy code goes to die, while developers test their spelunker skills and loose their sanity. Maybe I&rsquo;m just crap, but even using Sass anc Coffee/Typescript never really solved my issues. I was excited to try something really new, little did I know that using bleeding edge tech is a pain in the butt. Ok, I DID now that, but I was naive enough to think that maybe this time everything was going to be different.
The PITA was learning and being productive. It took a while, there&rsquo;s still not a clear &ldquo;best practice&rdquo; to perform common tasks, nor a clear starting configuration. Let&rsquo;s put it that way, if you come from the RoR world, where convention over configuration greatly reduced boilerplating and &ldquo;forced&rdquo; you to follow commonly established best practice, you&rsquo;re going to struggle with Flux. Hey, I figured it out, so it&rsquo;s not that big of a deal.</p>

<h1>Getting it all toghether</h1>

<p>Let&rsquo;s start writing some code. We&rsquo;ll go through a simple Rails app, it will feature user signup and login, and the ability to post a story. Just like Medium, but in a smaller size. Let&rsquo;s call it Small. Feel free to skip the Railsy part if you&rsquo;re only interested in Flux and React.</p>

<h1>Rails API</h1>

<p>A while ago I stumbled upon <a href="http://slides.com/alanpeabody/breaking-up-with-the-asset-pipeline#/">this article</a> by Alan Peabody. I had a similar experience as him, as the title say, I too feel the need to break up with Rails&#8217; asset pipeline and make Rails beautiful again. We&rsquo;ll be using the rails-api gem. You can generate a new app with its CLI command, or you can integrate it later. I&rsquo;ll do the later option, no reason really, just a habit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new small</span></code></pre></td></tr></table></div></figure>


<p>Next we&rsquo;ll add rails-api, devise, active model serializers gems to our gemfile, and while we are at it we can remove all the gems that generate assets or view content, jbuilder included. Our Gemfile should look like this (test section omitted):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.2.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails-api&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.4.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;active_model_serializers&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.8.3&#39;</span> <span class="c1"># NOTE: not the 0.9</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;devise&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.4.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sdoc&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.4.0&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:doc</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;byebug&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;web-console&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;spring&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to change the application controller so that it inherits from ActionController::API, and kiss the protect_From_forgery goodbye. Since we are serving only JSON, it makes sense to add</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">respond_to</span> <span class="ss">:json</span>
</span></code></pre></td></tr></table></div></figure>


<p>to the applciation controller, helps DRYing all out.</p>

<h2>Authentication</h2>

<p>Should I first define a resurce? Maybe, but that&rsquo;s trivial, let&rsquo;s get the authentication out of the way. We are building an API, so no session will be involved, we have to authenticate the user in each request. I&rsquo;ll be using <a href="http://oauthlib.readthedocs.org/en/latest/oauth2/grants/password.html">Oauth2 Resource Owner Password Credentials Grant</a> which sounds fancy, but it&rsquo;s really just a token in the request header that authenticates the caller. The gem Devise used to implement a token_authenticatable strategy, but it was pulled for security reason. There are gems that implement the strategy (like Doorkeeper), but since it&rsquo;s fairly easy to implement I&rsquo;ll do it for myself. Let&rsquo;s install Devise first by adding it in the Gemfile and launching <code>rails generate devise:install</code> after a <code>bundle install</code>, then we create the user model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="n">devise</span> <span class="no">User</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Token authentication</h2>

<p>Token authentication was removed from Devise a couple of years ago, <a href="http://blog.plataformatec.com.br/2013/08/devise-3-1-now-with-more-secure-defaults/">this link</a> explains why. We have to implement it for ourselves, but it&rsquo;s quite easy. The token will be composed of two information: the user&rsquo;s id followed by the token itself, separated by a <code>:</code>. We&rsquo;ll be using the user&rsquo;s database id for this sample, for semplicity&rsquo;s sake, but it&rsquo;s obviously not a smart thing to do.
First things first, we&rsquo;ll add an access_token to the user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddAccessTokenToUser</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:access_token</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and here&rsquo;s the User model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:recoverable</span><span class="p">,</span> <span class="ss">:validatable</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:update_access_token!</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update_access_token!</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">access_token</span> <span class="o">=</span> <span class="n">generate_access_token</span>
</span><span class='line'>    <span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">generate_access_token</span>
</span><span class='line'>    <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="no">Devise</span><span class="o">.</span><span class="n">friendly_token</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">break</span> <span class="n">token</span> <span class="k">unless</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">access_token</span><span class="p">:</span> <span class="n">token</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The user authentication will sit in the application controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:API</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:authenticate_user_from_token!</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">AbstractController</span><span class="p">:</span><span class="ss">:Translation</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">## </span>
</span><span class='line'>  <span class="c1"># User Authentication</span>
</span><span class='line'>  <span class="c1"># Authenticates the user with OAuth2 Resource Owner Password Credentials Grant</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate_user_from_token!</span>
</span><span class='line'>    <span class="n">auth_token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Authorization&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">auth_token</span>
</span><span class='line'>      <span class="n">authenticate_with_auth_token</span> <span class="n">auth_token</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">authentication_error</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate_with_auth_token</span> <span class="n">auth_token</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">auth_token</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">authentication_error</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="n">auth_token</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="no">Devise</span><span class="o">.</span><span class="n">secure_compare</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">access_token</span><span class="p">,</span> <span class="n">auth_token</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># User can access</span>
</span><span class='line'>      <span class="n">sign_in</span> <span class="n">user</span><span class="p">,</span> <span class="ss">store</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">authentication_error</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">## </span>
</span><span class='line'>  <span class="c1"># Authentication Failure</span>
</span><span class='line'>  <span class="c1"># Renders a 401 error</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authentication_error</span>
</span><span class='line'>    <span class="c1"># User&#39;s token is either invalid or not in the right format</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="ss">error</span><span class="p">:</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;application_controller.unauthorized&#39;</span><span class="p">)},</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">401</span>  <span class="c1"># Authentication timeout</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We conclude the auth process by providing the routes and the session controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">devise_for</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:v1</span><span class="p">,</span> <span class="ss">defaults</span><span class="p">:</span> <span class="p">{</span> <span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resource</span> <span class="ss">:login</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:create</span><span class="o">]</span><span class="p">,</span> <span class="ss">controller</span><span class="p">:</span> <span class="ss">:sessions</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the session controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/v1/sessions_controller.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>    <span class="n">skip_before_action</span> <span class="ss">:authenticate_user_from_token!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># POST /v1/login</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_for_database_authentication</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">invalid_login_attempt</span> <span class="k">unless</span> <span class="vi">@user</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">valid_password?</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sign_in</span> <span class="ss">:user</span><span class="p">,</span> <span class="vi">@user</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">serializer</span><span class="p">:</span> <span class="no">SessionSerializer</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">invalid_login_attempt</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">invalid_login_attempt</span>
</span><span class='line'>      <span class="n">warden</span><span class="o">.</span><span class="n">custom_failure!</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="ss">error</span><span class="p">:</span> <span class="n">t</span><span class="p">(</span><span class="s1">&#39;sessions_controller.invalid_login_attempt&#39;</span><span class="p">)},</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The SessionSerializer is an Active Model Serializer object, something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/serializers/v1/session_serializer.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SessionSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">attributes</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:token_type</span><span class="p">,</span> <span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:access_token</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">user_id</span>
</span><span class='line'>      <span class="n">object</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">token_type</span>
</span><span class='line'>      <span class="s1">&#39;Bearer&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Migrate, run the server, and create a user via the console. You should get something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">curl</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">3002</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">login</span> <span class="o">--</span><span class="n">data</span> <span class="s2">&quot;username=user@example.com&amp;password=password&quot;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;token_type&quot;</span><span class="p">:</span> <span class="s2">&quot;Bearer&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;access_token&quot;</span><span class="p">:</span> <span class="s2">&quot;1:MPSMSopcQQWr-LnVUySs&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a resource</h2>

<p>I won&rsquo;t go in detail here, the task is just plain RoR. We&rsquo;ll create a Story resource and a controller that will handle the user creation. You&rsquo;ll find the complete rails app in this repo. Moving on.</p>

<h2>CORS</h2>

<h2>Next up</h2>

<p>For readability I&rsquo;ll split the article here, jump here to start building the frontend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Small Updates]]></title>
    <link href="http://andreamazz.github.io/blog/2015/01/26/small-updates/"/>
    <updated>2015-01-26T20:57:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2015/01/26/small-updates</id>
    <content type="html"><![CDATA[<p>I&rsquo;m about to close week 4 of the &ldquo;One icon a day&rdquo; challenge, sometimes it&rsquo;s fun, sometimes it&rsquo;s tough, but I&rsquo;m glad I started this project. Adding some spice to the mix I also started recording what I do, mistakes and brain farts included. You can find the videos in this <a href="https://www.youtube.com/playlist?list=PL9N7C4VLxpJWOW8Au9VZyVXcR1lRFnMKD">Youtube playlist</a>.</p>

<!-- More -->


<p>Speaking of icons, a Reddit user suggested to put the resulting icons on <a href="http://thenounproject.com/">the NounProject</a>. I should have thought about this before, I mean, I really wish I thought about this before, because they have some requirements that differ a bit from what I&rsquo;ve been doing. No strokes for starters, which sucks since I&rsquo;ve been using them like it&rsquo;s my job. Other than that, it&rsquo;s gonna be <a href="https://www.youtube.com/watch?v=QetvK6ldl2s">smooth sailing</a>.</p>

<h2>Being a developer</h2>

<p>Let&rsquo;s talk about writing code for a while.<br/>
I took a pause from iOS in the past few months, I&rsquo;m not happy about it, but to face some pressing matters I had to put my web developer&rsquo;s clothes on.
In the end, I&rsquo;m glad, since I had a chance to choose and tinker with new stuff. First of all, I took the full API backed frontend route, using <a href="https://github.com/rails-api/rails-api">rails-api</a> (a stripped down version of Rails) to provide data for a React web app, implemented with a vanilla Flux architecture.</p>

<p>React and Flux are the new kids on the block, the documentation and community are still almost a work in progress, and there are little to no patterns to follow, even for the most trivial stuff as performing async requests or authenticating a user.
I scratched my head for a while, but in the end I&rsquo;ve learned quite a bit, and I&rsquo;m liking this new way of writing frontend apps more and more every day.</p>

<p>I&rsquo;m planning on writing all down in an article in the next few days, covering all: setup, the Flux architecture, authenticating the user with a token, performing async requests.<br/>
Until next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing an Icon a Day: Week 1]]></title>
    <link href="http://andreamazz.github.io/blog/2015/01/07/designing-an-icon-a-day-week-1/"/>
    <updated>2015-01-07T16:34:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2015/01/07/designing-an-icon-a-day-week-1</id>
    <content type="html"><![CDATA[<p>Week 1 over for this challenge. So far so good, the commitment required seems bearable, and to be honest it&rsquo;s a great way to take the mind off the other stuff.
I&rsquo;m still not sure about the general style of the icons though. So far I opted for large icons, with a fair amount of details, outlined with two possible stroke widths (4px and 2px). I&rsquo;m not sure about this, they might look good on a landing page or a dashboard, but they&rsquo;ll probably look off on a smaller scale in an app.<br/>
I&rsquo;m probably going to switch style the next month or further up down the road, but for now, they&rsquo;ll do.</p>

<p>Until next time</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing an Icon a Day]]></title>
    <link href="http://andreamazz.github.io/blog/2014/12/16/new-years-resolution/"/>
    <updated>2014-12-16T14:42:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/12/16/new-years-resolution</id>
    <content type="html"><![CDATA[<p><em>&ldquo;This year is the year. The year when I actually take my new year&rsquo;s resolution to its completion&rdquo;</em>. That&rsquo;s what I tell myself every year. Last year I started a new resolution: post an article a month on this blog. Well&hellip; that went great as you can see, although it was a nice experience being on the first page of <a href="https://news.ycombinator.com/item?id=8010233">Hacker News</a> for a brief period. <!-- More -->
I did try my best, but sometimes life hits you like a ton of bricks. Feeling swarmed I opted to dedicate my spare time to my open source projects on <a href="https://github.com/andreamazz">Github</a>, leaving this blog rather sad and empty.<br/>
Anyway, since I&rsquo;m a creature of habit, I am here telling myself <em>&ldquo;This year is the year. the year when I actually take my new year&rsquo;s resolution to its completion&rdquo;</em>. Since I&rsquo;m an idiot I&rsquo;m about to pick a challenge worth 365 daily efforts instead of 12 monthly ones.
Before illustrating this year&rsquo;s challenge, I&rsquo;ll take a step back to explain my reasoning behind this. If you happened to read one of my previous post you might know that I&rsquo;m an iOS developer at heart, and sometimes I take a stab at UI design and Rails development. I feel like my iOS tools are moderately sharp (although I need to catch up on WatchKit and start taking Swift more seriously, i.e.: start using it for production code), unlike my designer&rsquo;s skills, that definitely need some polish. That&rsquo;s why this year&rsquo;s resolution will be covered by my favorite design tool, <a href="http://bohemiancoding.com/sketch/">Sketch</a>.</p>

<h2>Designing an icon a day</h2>

<p>The other day I stumbled upon <a href="http://sensibleworld.com/news/year-of-icons/">this project</a>. A really simple idea (to describe): design an icon a day. I love this concept, for one I&rsquo;ll be able to practice designing vector shapes, and as icing on this slowly baked cake I&rsquo;ll end up with a bunch of (hopefully) reusable icons.
I was intrigued, so intrigued that I think this will be the perfect year-long project.
I can already hear future-me screaming in pain, calling me an idiot. Brilliant.</p>

<h2>How and where</h2>

<p>I&rsquo;ll be using Sketch, and my main source of inspiration will be, at first, random words from a word generator.
I&rsquo;ll be posting the icons on my Github&rsquo;s profile, in <a href="https://github.com/andreamazz/one-icon-a-day">this repository</a>. The icons will be licensed under Creative Commons&rsquo;s Attribution 4.0 International licence.
The fun starts on January 1 2015. Future-me will hopefully stop this project on December 31 2015 maintaining a sizeable amount of sanity.</p>

<p>Untile next time.</p>

<p>I&rsquo;m so going to botch this&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun With iBeacon]]></title>
    <link href="http://andreamazz.github.io/blog/2014/07/01/fun-with-ibeacon/"/>
    <updated>2014-07-01T20:47:00+02:00</updated>
    <id>http://andreamazz.github.io/blog/2014/07/01/fun-with-ibeacon</id>
    <content type="html"><![CDATA[<p>You probably know already what <a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html">iBeacon</a> is, but just to reiterate, iBeacon is the Apple way of saying Bluetooth 4 Low Energy. At the cost of sounding like a mindless drone, by &lsquo;the Apple way of&rsquo; I mean &lsquo;it just works and shows a lot of potential&rsquo;. An iBeacon is a simple B4LE device that keeps broadcasting its presence. Other B4LE devices can sense when they reach the beacon without draining the battery (hence the LE) and making the user scream in agony. &ldquo;Oook, what do I do with it?&rdquo;. The best thing you can do is locating a user without the GPS, which means locating a user inside a building. The cool thing is that it&rsquo;s fast, it takes seconds to detect a beacon and to react to its vicinity (or lack there of), and it works within the reach of Bluetooth technology (let&rsquo;s say around a 50 meters radius). I should also mention that it works fine with Android too. (<em>Update: look at the end of the post for the sources of the Android version</em>)
This week an <a href="http://estimote.com">Estimote</a> developer kit arrived in the Fancy Pixel&rsquo;s offices, so we took the chance to play around with it.</p>

<!-- More -->


<p>I already tried my hand with iBeacons in the not so distant past. Using <a href="https://github.com/lgaches/BeaconEmitter">BeaconEmitter</a> you can easily turn your Mac into a beacon, with no extra hardware required. When I experimented with iBeacons I had a couple of ideas on my mind, that involved being able to send a local notification to the user that enters in range of a device acting as a beacon. My dreams were crushed by the limits of the iOS 7.0 implementation, as I found out that:</p>

<ul>
<li>you can&rsquo;t react when the user&rsquo;s screen is turned off</li>
<li>you can&rsquo;t perform any action when your app is in background, even if you request the <code>location</code> background state</li>
<li>detecting when the user leaves a region takes quite a lot of time (at least 10/15 minutes)</li>
</ul>


<p>The most exciting thing about playing around with the Estimote SDK, besides the nifty packaging and well designed piece of hardware, is that my devices now have iOS 7.1. It turns out that with version 7.1, iOS is way more flexible and it&rsquo;s taking care of all the problems I faced with 7.0:</p>

<ul>
<li>you can show a local notification when the screen is off</li>
<li>you can perform operations when the user enters a region (even if the app was killed)</li>
<li>it takes second to detect when the user is out of range</li>
</ul>


<p>This turns everything around, iBeacons aren&rsquo;t just a gimmick now, but an exciting tool to experiment with.</p>

<h2>Building a sample</h2>

<p>First thing that came to our mind was to build a simple system to automatically check people in and out of the office. Really, as simple as it gets, it took a couple of hours to build, but it works surprisingly well.</p>

<h3>Rails backend</h3>

<p>To check people in and out we need a backend and an authentication system. Rails makes it easy, a model, a basic API and the help of Devise for the authentication process.</p>

<figure class='code'><figcaption><span>app/model/checkin.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Checkin</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">enum</span> <span class="ss">direction</span><span class="p">:</span> <span class="p">{</span> <span class="k">in</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">out</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a pretty basic model, taking advantage of Rails 4.1 enums.</p>

<p>The routes are scoped as APIs, just to be fancy:</p>

<figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:api</span><span class="p">,</span> <span class="ss">defaults</span><span class="p">:</span> <span class="p">{</span><span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span><span class="p">}</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:v1</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;checkin&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;checkins#checkin&#39;</span>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;checkout&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;checkins#checkout&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the controller does pretty much just this:</p>

<figure class='code'><figcaption><span>checkins_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">checkin</span>
</span><span class='line'>  <span class="n">checkin</span> <span class="o">=</span> <span class="no">Checkin</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">user</span><span class="p">:</span> <span class="n">current_user</span><span class="p">,</span> <span class="ss">direction</span><span class="p">:</span> <span class="ss">:in</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">checkin</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">head</span> <span class="ss">:no_content</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="ss">errors</span><span class="p">:</span> <span class="n">checkin</span><span class="o">.</span><span class="n">errors</span><span class="p">},</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The authentication is handled by Devise, and for simplicity we opted for HTTP Basic Authentication.</p>

<h3>iOS Client</h3>

<p>The iOS app needs to look for our trusty beacon, and once the user is in range of our region, it needs to make a POST call to our API. When the user walks out of the office the phone needs to do the same to the checkout API. The iOS APIs for handling beacons are inside CoreLocation, in this sample I&rsquo;ll be using two main delegate methods:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didEnterRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didExitRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The good guy calling these two methods is a <code>CLLocationManager</code> instance. The location manager needs an instance of <code>CLBeaconRegion</code> to start doing its magic though. We can define a region by specifying a UUDID, an identifier, a major and a minor. It might sound confusing at first, but all those things boil down to this:</p>

<ul>
<li><code>UUDID</code>: A unique identifier of our beacon network. It&rsquo;s best practice to have one UUDID per App. Each beacon will share the same UUDID.</li>
<li><code>identifier</code>: It&rsquo;s a string representation of our network. It usually is the reverse URI of our App, something along the line of com.something.awesome.</li>
<li><code>major</code>: It&rsquo;s an integer that specifies the major group of our beacons. Think of it as a common number that can identify a bunch of beacons inside a building.</li>
<li><code>minor</code>: It&rsquo;s an integer that specifies the single beacon inside of a major group.</li>
</ul>


<p>So our basic config would be one UUDID and identifier per App, one major per building, and one minor per beacon. For the purposes of this sample we only have a beacon, so we can either disregard this info, or just specify whatever major and minor that we want, as long as it matches the ones configured in the beacon itself.
Now that all that is out of the way, let&rsquo;s get to the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nf">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_region</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSUUID</span> <span class="o">*</span><span class="n">proximityUUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithUUIDString:</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;udid&quot;</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">_region</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span><span class="n">proximityUUID</span>
</span><span class='line'>                                                          <span class="nl">major:</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;major&quot;</span><span class="p">]</span> <span class="n">intValue</span><span class="p">]</span>
</span><span class='line'>                                                          <span class="nl">minor:</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;minor&quot;</span><span class="p">]</span> <span class="n">intValue</span><span class="p">]</span>
</span><span class='line'>                                                     <span class="nl">identifier:</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;identifier&quot;</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">_region</span> <span class="nl">setNotifyOnExit:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_region</span> <span class="nl">setNotifyOnEntry:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_region</span> <span class="nl">setNotifyEntryStateOnDisplay:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_region</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There we go, our lazy loaded region that reads the parameters from an NSDictionary. Cool, let&rsquo;s start monitoring:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">manager</span> <span class="nl">startMonitoringForRegion:</span><span class="n">self</span><span class="p">.</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">manager</span> <span class="nl">stopRangingBeaconsInRegion:</span><span class="n">self</span><span class="p">.</span><span class="n">region</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first line is pretty self explanatory, the second one just tells the system that I don&rsquo;t really care for the single beacons, I just need the region updates.</p>

<p>Now that we are monitoring the region, we just need to decide what to do when we are in and out of range:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didEnterRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">region</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">beaconRegion</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString:</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;identifier&quot;</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">beaconRegion</span><span class="p">.</span><span class="n">major</span> <span class="n">intValue</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;major&quot;</span><span class="p">]</span> <span class="n">intValue</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">beaconRegion</span><span class="p">.</span><span class="n">minor</span> <span class="n">intValue</span><span class="p">]</span><span class="o">==</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;minor&quot;</span><span class="p">]</span> <span class="n">intValue</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">notification</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UILocalNotification</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>            <span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;identifier&quot;</span><span class="o">:</span> <span class="n">region</span><span class="p">.</span><span class="n">identifier</span><span class="p">};</span>
</span><span class='line'>            <span class="n">notification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;Entering %@&quot;</span><span class="p">,</span> <span class="n">region</span><span class="p">.</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>            <span class="n">notification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="s">@&quot;Default&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">presentLocalNotificationNow:</span><span class="n">notification</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="nl">remoteCheckin:</span><span class="n">FPCheckDirectionIn</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didExitRegion:</span><span class="p">(</span><span class="n">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">region</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">CLBeaconRegion</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="p">(</span><span class="n">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">beaconRegion</span><span class="p">.</span><span class="n">identifier</span> <span class="nl">isEqualToString:</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;identifier&quot;</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">beaconRegion</span><span class="p">.</span><span class="n">major</span> <span class="n">intValue</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;major&quot;</span><span class="p">]</span> <span class="n">intValue</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">beaconRegion</span><span class="p">.</span><span class="n">minor</span> <span class="n">intValue</span><span class="p">]</span><span class="o">==</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">@&quot;minor&quot;</span><span class="p">]</span> <span class="n">intValue</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">notification</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UILocalNotification</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>            <span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;identifier&quot;</span><span class="o">:</span> <span class="n">region</span><span class="p">.</span><span class="n">identifier</span><span class="p">};</span>
</span><span class='line'>            <span class="n">notification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;Exiting %@&quot;</span><span class="p">,</span> <span class="n">region</span><span class="p">.</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>            <span class="n">notification</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="s">@&quot;Default&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">presentLocalNotificationNow:</span><span class="n">notification</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="nl">remoteCheckin:</span><span class="n">FPCheckDirectionOut</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we&rsquo;re just checking against our beacon, when we are in range or when we get out of range, we push a local notification and we perform a remote call to our Rails backend. You can find the full source on our Github account, don&rsquo;t worry.</p>

<h2>Who&rsquo;s Fancy?</h2>

<p>And there we go, the iOS app:</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-07-01/iOS.png" title="'Who's Fancy iOS'" ></p>

<p>and the web page:</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-07-01/rails.png" title="'Who's Fancy Rails'" ></p>

<p>You can find the rails and iOS code <a href="https://github.com/FancyPixel/whosfancy-rails">here</a> and <a href="https://github.com/FancyPixel/whosfancy-ios">here</a>.</p>

<h4>Android version</h4>

<p>Updated: We also pushed the Android version on our Github page, you can find it <a href="https://github.com/FancyPixel/whosfancy-android">here</a>.</p>

<p>Until next time.</p>

<p>Andrea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIKit Dynamics]]></title>
    <link href="http://andreamazz.github.io/blog/2014/05/22/uikit-dynamics/"/>
    <updated>2014-05-22T19:19:00+02:00</updated>
    <id>http://andreamazz.github.io/blog/2014/05/22/uikit-dynamics</id>
    <content type="html"><![CDATA[<p>I&rsquo;m late to the party with this, but I finally had a chance to play around with UIKit Dynamics. I like what I see, I really like it&hellip; I&rsquo;ll spend the rest of my days implementing physics based UI elements&hellip; UIImageView slingshots, UISwitch trabuchets, UISlider catapults&hellip; you name it. Jokes aside, a Github user pointed out in the issue section of <a href="https://github.com/andreamazz/AMWaveTransition">AMWaveTransition</a> that Facebook Paper&rsquo;s <em>wavy</em> transition also implements the interactive pop gesture. &ldquo;Pffftt&hellip; easy&rdquo; I thought. I was wrong. This is how I found out about my new favorite framework.</p>

<!-- More -->


<h3>UIPercentDrivenInteractiveTransition</h3>

<p>I started doing some research on custom interactive transitions, and I stumbled upon <code>UIPercentDrivenInteractiveTransition</code>. The logic behind it is really clever, the developer just needs to provide a custom animation and use a UIPanGestureRecognizer to keep track of the completion percentage, and notify the system with such value. UIKit does its magic and the animation is performed in small steps.
That sounds easy enough, but AMWaveTransition uses a couple of hacky ways to achieve its effect, and it&rsquo;s not based on a single animation block, but in different (and nested) animations.
I was not surprised when I found out that my percent driven transition didn&rsquo;t work. At all.<br/>
Besides that, if you look closely to the Paper&rsquo;s implementation, you can see that the cells react to the finger&rsquo;s Y coordinate, not just the X. This means that the cell below the finger is the one &lsquo;leading the charge&rsquo;, the other cells lag behind it. That smells a lot like a custom transition, not a percent driven one.</p>

<h3>UIScreenEdgePanGestureRecognizer</h3>

<p>&ldquo;Ok, no UIKit magic for me this time, I&rsquo;ll just write the animations from scratch.&rdquo;. A <code>UIScreenEdgePanGestureRecognizer</code> and some UIView&rsquo;s animations sounded like the right tools. I just had to figure out what cell to move first, and let the other lag behind, taking account of the swipe velocity. The gestures&#8217; tools make that easy enough, you can get the state and velocity of the finger, and apply different animations with different durations and/or delays. Running an animation for each time that the swipe gesture changes isn&rsquo;t a good idea though. A lot of animations get queued up, and even whith the option <code>UIViewAnimationOptionBeginFromCurrentState</code> the resulting effect just isn&rsquo;t right. Also, managing the possibility that the user might swipe back and forth before completing or cancelling increases the complexity.</p>

<p>I didn&rsquo;t want that.</p>

<h3>Dynamics!</h3>

<p>UIKit Dynamics, introduced with iOS7, is a physics engine that lets you apply physics traits to UIKit elements. Its implementation is brilliantly simple, there&rsquo;s an Animator object that handles the various behaviors associated to an interface object. The animator is attached to a reference view (basically the container of all the other views) and handles all the animations, defined by some predefined behaviors (and you can define your own):</p>

<ul>
<li>UIGravityBehavior</li>
<li>UICollisionBehavior</li>
<li>UIAttachmentBehavior</li>
<li>UISnapBehavior</li>
<li>UIPushBehavior</li>
</ul>


<p>Each behavior is configurable, and can be combined with the others.</p>

<h4>UIAttachmentBehavior</h4>

<p>From its <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIAttachmentBehavior_Class/Reference/Reference.html">class reference</a>: <em>&ldquo;An attachment behavior specifies a dynamic connection between two dynamic items, or between a dynamic item and an anchor point. By default, an item’s attachment point is at its center, but you can change that.&rdquo;</em>. I can change that&hellip; sounds good. I can attach a view to an anchorpoint, and update such point, say to follow the user&rsquo;s swipe. It also features a couple of nifty properties:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// The amount of damping to apply to the attachment behavior.</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">readwrite</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">damping</span>
</span><span class='line'><span class="c1">// The frequency of oscillation for the attachment behavior.</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">readwrite</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">frequency</span>
</span></code></pre></td></tr></table></div></figure>


<p>These property will make the attachment springy. Feeling confident.</p>

<h3>Interactive pop</h3>

<p>Performing the interactive pop now should be just a matter of making some calculation, and figure out which view to move and where. I started by adding a <code>UIScreenEdgePanGestureRecognizer</code> to the UINavigationController provided by the user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">attachInteractiveGestureToNavigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="o">=</span> <span class="n">navigationController</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">gesture</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIScreenEdgePanGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handlePan:</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">gesture</span> <span class="nl">setEdges:</span><span class="n">UIRectEdgeLeft</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">navigationController</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">self</span><span class="p">.</span><span class="n">gesture</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">animator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIDynamicAnimator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithReferenceView:</span><span class="n">navigationController</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">attachmentsFrom</span> <span class="o">=</span> <span class="p">[</span><span class="err">@</span><span class="p">[]</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">attachmentsTo</span> <span class="o">=</span> <span class="p">[</span><span class="err">@</span><span class="p">[]</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see I also created a <code>UIDynamicAnimator</code>, he&rsquo;s the good guy that&rsquo;ll do all the heavy lifting in a while.</p>

<h4>Handling the gesture</h4>

<p>Once a swipe gesture from the left edge is performed, I need to get a hold of the cells from both the view controllers (the current visible controller, and the one we are swiping back to):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Starting controller</span>
</span><span class='line'><span class="n">UIViewController</span><span class="o">&lt;</span><span class="n">AMWaveTransitioning</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">fromVC</span><span class="p">;</span>
</span><span class='line'><span class="n">fromVC</span> <span class="o">=</span> <span class="p">(</span><span class="n">UIViewController</span><span class="o">&lt;</span><span class="n">AMWaveTransitioning</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Controller that will be visible after the pop</span>
</span><span class='line'><span class="n">UIViewController</span><span class="o">&lt;</span><span class="n">AMWaveTransitioning</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">toVC</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">viewControllers</span> <span class="nl">indexOfObject:</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">];</span>
</span><span class='line'><span class="n">toVC</span> <span class="o">=</span> <span class="p">(</span><span class="n">UIViewController</span><span class="o">&lt;</span><span class="n">AMWaveTransitioning</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">viewControllers</span><span class="p">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>While I&rsquo;m at it I also ask the gesture for the touch position and the swipe horizontal velocity:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">float</span> <span class="n">velocity</span> <span class="o">=</span> <span class="p">[</span><span class="n">gesture</span> <span class="nl">velocityInView:</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">view</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">touch</span> <span class="o">=</span> <span class="p">[</span><span class="n">gesture</span> <span class="nl">locationInView:</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the fun part. When the gesture starts, I need to figure out which cell is below the touch point, and then wire up a <code>UIAttachmentBehavior</code> to each cell. I&rsquo;ll be storing the behavior in a mutable array, and add it to our trusty animator. The anchor point will be the touch&rsquo;s X coordinate, while the Y coordinate will be the center of the cell (playing around with this coordinate can be fun, it&rsquo;s worth a try).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">fromVC</span> <span class="n">visibleCells</span><span class="p">]</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="n">view</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The &#39;selected&#39; cell will be the one leading the other cells</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">CGRectContainsPoint</span><span class="p">([</span><span class="n">view</span><span class="p">.</span><span class="n">superview</span> <span class="nl">convertRect:</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="nl">toView:</span><span class="nb">nil</span><span class="p">],</span> <span class="n">touch</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">selectionIndexFrom</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">idx</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">UIAttachmentBehavior</span> <span class="o">*</span><span class="n">attachment</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAttachmentBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItem:</span><span class="n">view</span>
</span><span class='line'>                                                                 <span class="nl">attachedToAnchor:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">){</span><span class="n">touch</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">superview</span> <span class="nl">convertPoint:</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span> <span class="nl">toView:</span><span class="nb">nil</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">}];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attachment</span> <span class="nl">setDamping:</span><span class="mf">0.4</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">attachment</span> <span class="nl">setFrequency:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior:</span><span class="n">attachment</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">attachmentsFrom</span> <span class="nl">addObject:</span><span class="n">attachment</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>I need to do this for both <code>fromVC</code> and <code>toVC</code>.</p>

<h4>Moving the cells</h4>

<p>Believe it or not, the hard part is over. Thanks to UIKit Dynamics handling the gesture change is easy as updating the point:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">gesture</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateChanged</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">fromVC</span> <span class="n">visibleCells</span><span class="p">]</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="n">view</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">attachmentsFrom</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="nl">setAnchorPoint:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">){</span><span class="n">touch</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">superview</span> <span class="nl">convertPoint:</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span> <span class="nl">toView:</span><span class="nb">nil</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">}];</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above just moves the cells in the old fashioned way. You might point out that that&rsquo;s not <em>wavy</em> at all. Well&hellip; it&rsquo;s not.
To make it more interesting we need to play around with the velocity and the distance between cells.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">float</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">touch</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">abs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">selectionIndexFrom</span> <span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">idx</span><span class="p">)</span> <span class="o">*</span> <span class="n">velocity</span> <span class="o">/</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">attachmentsFrom</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="nl">setAnchorPoint:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">){</span><span class="n">delta</span><span class="p">,</span> <span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">superview</span> <span class="nl">convertPoint:</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span> <span class="nl">toView:</span><span class="nb">nil</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This takes the touch value, subtracts an amount of pixel determined by the distance from the starting cell, multiplied by the velocity (that is toned down by the magic value 50, provided by wisdom. And by wisdom I mean trial and error).
If you set this up and play around with it a bit you&rsquo;ll notice that it&rsquo;s easy to break stuff. If you swipe too fast, <code>delta</code> becomes huge, and the latch changes direction. Fixing issues like this can be a pain, fortunately the open source community comes to the rescue.</p>

<h4>DynamicXray</h4>

<p><a href="http://dynamicxray.net/">DynamicXray</a> is a tool that provides a graphical runtime representation of the inner workings of a UIKit animator. You just add it to your animator like you would with a behavior, and all your bounds, constraints and forces are represented alongside your views. That&rsquo;s really handy to figure out why a view is acting weird.</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-05-22/xray.png" title="'Result'" ></p>

<p>With the debug wireframe on I was able to see that an excessive swipe caused the latch to change direction, causing the view to follow the touch coordinates from the wrong side of the screen. It&rsquo;s an easy fix, that involves another magic number (2):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">delta</span> <span class="o">&gt;</span> <span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delta</span> <span class="o">=</span> <span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Needles to say, I&rsquo;m not happy with this solution, but for now it would do.</p>

<p>With all this set up, the rest was just maintenance&hellip; I just need to clean everything up when the gesture reaches its end, and call <code>popViewControllerAnimated</code> on the navigation controller.</p>

<p>And there we go:</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-05-22/screenshot.gif" title="'Result'" ></p>

<p>As usual, you can find the code on <a href="https://github.com/andreamazz/AMWaveTransition">Github</a>.</p>

<p>Until next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transitioning]]></title>
    <link href="http://andreamazz.github.io/blog/2014/04/19/transitioning/"/>
    <updated>2014-04-19T19:30:00+02:00</updated>
    <id>http://andreamazz.github.io/blog/2014/04/19/transitioning</id>
    <content type="html"><![CDATA[<p>I like to kick the morning off by visiting a handful of sites that collect cool app designs. One of my favorite is <a href="http://capptivate.co">Capptivate</a>. I often find myself browsing the site thinking &ldquo;I want one of that.&rdquo;. It&rsquo;s even better if the design triggers another question in my mind: &ldquo;How did they do that?!&rdquo;.<br/>
I had one of these moments last week, looking at the push transition in <a href="http://capptivate.co/2014/02/04/paper/">Facebook&rsquo;s Paper</a> app. It was a good chance to take a stab at iOS7 custom transitions.</p>

<!-- More -->


<h3>Learning custom transitions</h3>

<p>I won&rsquo;t be covering in depth the custom transition APIs in this post, just what I needed to learn to reproduce the aforementioned effect. The main reason is because there are already good sources that cover this matter, I learned a lot from NSScreencast&rsquo;s <a href="http://nsscreencast.com/episodes/86-ios-7-view-controller-transitions">&ldquo;iOS7 View controller Transitions&rdquo;</a> (the subscription fee is well worth all the quality content) and objc.io&rsquo;s <a href="http://www.objc.io/issue-5/view-controller-transitions.html">&ldquo;View controller transitions&rdquo;</a>. The former covers modal transitions, while the later coverage of push transitions was really helpful.</p>

<h3>UINavigationController&rsquo;s delegate</h3>

<p>iOS7 introduces a new set of delegate methods in UINavigationController&rsquo;s protocol:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">–</span> <span class="nl">navigationController:animationControllerForOperation:fromViewController:toViewController:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">navigationController:interactionControllerForAnimationController:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">navigationControllerPreferredInterfaceOrientationForPresentation:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">navigationControllerSupportedInterfaceOrientations:</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first one is the most interesting of the bunch, it&rsquo;s called when the navigation controller is ready to animate to a new state (or for better terms, when it&rsquo;s ready to perform a new <code>UINavigationControllerOperation</code>) and expects in return a new object that conforms to the <code>UIViewControllerAnimatedTransitioning</code> protocol. It also has a reference to the view controller that we are transitioning from and a reference to the controller that we are transitioning to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">UIViewControllerAnimatedTransitioning</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>                   <span class="nf">navigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span>
</span><span class='line'>        <span class="nf">animationControllerForOperation:</span><span class="p">(</span><span class="n">UINavigationControllerOperation</span><span class="p">)</span><span class="nv">operation</span>
</span><span class='line'>                     <span class="nf">fromViewController:</span><span class="p">(</span><span class="n">UIViewController</span><span class="o">*</span><span class="p">)</span><span class="nv">fromVC</span>
</span><span class='line'>                       <span class="nf">toViewController:</span><span class="p">(</span><span class="n">UIViewController</span><span class="o">*</span><span class="p">)</span><span class="nv">toVC</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>UIViewControllerAnimatedTransitioning</h3>

<p>Cool, we get notified when the navigation controller is ready to make its magic. Let&rsquo;s take a look at what kind of object it expects from us, by inspecting <code>UIViewControllerAnimatedTransitioning</code> protocol:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">UIViewControllerAnimatedTransitioning</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="nl">transitionDuration:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">UIViewControllerContextTransitioning</span><span class="o">&gt;</span><span class="p">)</span><span class="n">transitionContext</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">animateTransition:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">UIViewControllerContextTransitioning</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">transitionContext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">animationEnded:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="n">transitionCompleted</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy enough&hellip; one call for the animation&rsquo;s duration and one call to perform said animation.<br/>
Before diving into the code we might want to lay out our animation graphically. Let&rsquo;s fire up Sketch and draw something:</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-04-19/sketch.png" title="'Sketch'" ></p>

<p>Ok, so we have two view controllers, they both have table views, and we want to present the new cells with a slight delay each, while kicking the old cells to the other side, with the same delay.<br/>
Let&rsquo;s break it down.</p>

<p><em>From</em> ViewController:</p>

<ul>
<li>Get the visible cells in the table view</li>
<li>Move each cell to the left by the screen width</li>
<li>Fade out each cell</li>
<li>On completion set the cells back to their position (we&rsquo;ll need them on <em>pop</em>)</li>
</ul>


<p><em>To</em> ViewController:</p>

<ul>
<li>Set the controller&rsquo;s frame to match the starting controller</li>
<li>Move the controller&rsquo;s frame to the side</li>
<li>Get the visible cells in the table view</li>
<li>Push the cells to the right <em>with no animation</em></li>
<li>Move each cell to the left</li>
</ul>


<p>That looks pretty simple, but there are couple of caveats.<br/>
The first thing that I noticed is that the new cells are not available at first. The second issue was that if I moved the destination frame to match the source one right away, the source cells would disappear instantly.<br/>
To solve these issues I had to use a little trick: use a <code>0</code> duration animation where I move the frame of the destination controller to the point <code>(1,0)</code>. This allows the destination controller to load its cells, and the source controller will still be visible.</p>

<p>To sum it up (I&rsquo;ll include only the <em>push</em> code):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Move the destination in place</span>
</span><span class='line'><span class="n">toVC</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">source</span><span class="p">;</span>
</span><span class='line'><span class="c1">// And kick it aside</span>
</span><span class='line'><span class="n">toVC</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="n">SCREEN_WIDTH</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// First step is required to trigger the load of the visible cells.</span>
</span><span class='line'><span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mi">0</span> <span class="nl">delay:</span><span class="mi">0</span> <span class="nl">options:</span><span class="n">UIViewAnimationOptionCurveEaseIn</span> <span class="nl">animations:</span><span class="nb">nil</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Plain animation that moves the destination controller in place. Once it&#39;s done it will notify the transition context</span>
</span><span class='line'>        <span class="p">[</span><span class="n">toVC</span><span class="p">.</span><span class="n">view</span> <span class="nl">setTransform:</span><span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="n">self</span><span class="p">.</span><span class="n">duration</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">maxDelay</span> <span class="nl">delay:</span><span class="mi">0</span> <span class="nl">options:</span><span class="n">UIViewAnimationOptionCurveEaseIn</span> <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                            <span class="p">[</span><span class="n">toVC</span><span class="p">.</span><span class="n">view</span> <span class="nl">setTransform:</span><span class="n">CGAffineTransformIdentity</span><span class="p">];</span>
</span><span class='line'>                    <span class="p">}</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="p">[</span><span class="n">transitionContext</span> <span class="nl">completeTransition:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>                    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Animates the cells of the starting view controller</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">fromVC</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">visibleCells</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">fromVC</span> <span class="n">visibleCells</span><span class="p">]</span> <span class="nl">enumerateObjectsWithOptions:</span><span class="n">NSEnumerationReverse</span> <span class="nl">usingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSTimeInterval</span> <span class="n">delay</span> <span class="o">=</span> <span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">idx</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)[[</span><span class="n">fromVC</span> <span class="n">visibleCells</span><span class="p">]</span> <span class="n">count</span><span class="p">])</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">maxDelay</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">animation</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">obj</span> <span class="nl">setTransform:</span><span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="o">-</span><span class="n">delta</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">obj</span> <span class="nl">setAlpha:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">completion</span><span class="p">)(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">){</span>
</span><span class='line'>                <span class="p">[</span><span class="n">obj</span> <span class="nl">setTransform:</span><span class="n">CGAffineTransformIdentity</span><span class="p">];</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="n">self</span><span class="p">.</span><span class="n">duration</span> <span class="nl">delay:</span><span class="n">delay</span> <span class="nl">options:</span><span class="n">UIViewAnimationOptionCurveEaseIn</span> <span class="nl">animations:</span><span class="n">animation</span> <span class="nl">completion:</span><span class="n">completion</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">toVC</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">visibleCells</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">toVC</span> <span class="n">visibleCells</span><span class="p">]</span> <span class="nl">enumerateObjectsWithOptions:</span><span class="n">NSEnumerationReverse</span> <span class="nl">usingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSTimeInterval</span> <span class="n">delay</span> <span class="o">=</span> <span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">idx</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)[[</span><span class="n">fromVC</span> <span class="n">visibleCells</span><span class="p">]</span> <span class="n">count</span><span class="p">])</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">maxDelay</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="n">obj</span> <span class="nl">setTransform:</span><span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="n">delta</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class='line'>            <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">animation</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">obj</span> <span class="nl">setTransform:</span><span class="n">CGAffineTransformIdentity</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">obj</span> <span class="nl">setAlpha:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="n">self</span><span class="p">.</span><span class="n">duration</span> <span class="nl">delay:</span><span class="n">delay</span> <span class="nl">options:</span><span class="n">UIViewAnimationOptionCurveEaseIn</span> <span class="nl">animations:</span><span class="n">animation</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will get the cell animating back and forth, but the effect is far from impressive, we need some further tinkering.</p>

<h3>Setting up the view controller</h3>

<p>If you take a look at Paper, the cells move back and forth on the same background image, you can&rsquo;t see a clear cut from a view controller to the other. That&rsquo;s easy to achieve, we just need to configure our navigation controller like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">view</span> <span class="nl">setBackgroundColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithPatternImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;background&quot;</span><span class="p">]]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span> <span class="nl">setBackgroundImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;navbar&quot;</span><span class="p">]</span> <span class="nl">forBarMetrics:</span><span class="n">UIBarMetricsDefault</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">setBackgroundColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">clearColor</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">setBackgroundColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">clearColor</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span> <span class="nl">setTintColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>And our cells need to be transparent too:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UITableViewCell</span><span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ... </span>
</span><span class='line'>    <span class="p">[</span><span class="n">cell</span> <span class="nl">setBackgroundColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">clearColor</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">cell</span> <span class="nl">setSelectionStyle:</span><span class="n">UITableViewCellSelectionStyleNone</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can take the new animator for a spin, by returning it in the delegate method:</p>

<p><code>navigationController:animationControllerForOperation:fromViewController:toViewController:</code></p>

<p>Here&rsquo;s the result:</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-04-19/screenshot.gif" title="'Result'" ></p>

<p>It&rsquo;s not perfect, but it can be easily tweaked.</p>

<h3>The code</h3>

<p>I released all the code described above as a pod. It includes both the push and pop operations, and its fairly customizable.<br/>
You can find the source <a href="https://github.com/andreamazz/AMWaveTransition">here</a>.</p>

<p>Until next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hey iOS, I Like You, We Should Be Friends]]></title>
    <link href="http://andreamazz.github.io/blog/2014/03/10/hey-ios/"/>
    <updated>2014-03-10T19:30:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/03/10/hey-ios</id>
    <content type="html"><![CDATA[<p>I started this year with a new year&rsquo;s resolution: <em>write at least a blog post per month</em>. Let me check the date of the last post&hellip;. yep, February 1st, oops, my bad. In my defense it&rsquo;s been a crazy month. I spent the last couple of weeks restyling (basically from the ground up) one of our apps over at Fancy Pixel (<a href="https://itunes.apple.com/us/app/memento-i-know-this-place/id698153906?l=it&amp;ls=1&amp;mt=8">Memento: I know this place</a>), and also rewrote the <a href="http://memento.fancypixel.it">landing page</a> for it.<br/>
I had a chance to try out some cool libraries and tools though, so here&rsquo;s my belated post of the month. The title itself is there just to express my appreciation for iOS and its open-source community. I mean, the quantity and quality of third party libraries is mind boggling. Love it.</p>

<!-- More -->


<h4>Either I&rsquo;m drunk or the parallax effect is too heavy</h4>

<p>Parallax effect is the new gimmick of iOS7, and it&rsquo;s so Apple-y: it&rsquo;s simple, cost basically nothing in performances, and yet is so effective. I found a couple of libraries that make its implementation a breeze: NGAParallaxMotion and CSStickyHeaderFlowLayout.</p>

<h6>NGAParallaxMotion</h6>

<p>That&rsquo;s a pretty straight forward library. You already know all too well the effect, just look at the springboard. <a href="https://github.com/michaeljbishop/NGAParallaxMotion">NGAParallaxMotion</a> makes it easy as pie to implement, just pop the pod in your podfile, and use the parallaxIntensity property. It can be also used by a designer with no coding skill, straight in an XCode storyboard. Kudos to <a href="https://github.com/michaeljbishop">Michael Bishop</a>, I wish I thought of that.</p>

<h6>CSStickyHeaderFlowLayout</h6>

<p>I like the iOS7 Twitter profile section. You scroll down, the profile background explodes and gets blurry. It&rsquo;s purely a cosmetic thing, makes no sense and that&rsquo;s why it&rsquo;s awesome. I like it so much that I decided to implement it in Memento. Enters <a href="https://github.com/jamztang/CSStickyHeaderFlowLayout">CSStickyHeaderFlowLayout</a>.</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-03-10/memento.gif" title="'CSStickyHeaderFlowLayout'" ></p>

<p>I was going to write a couple of lines describing how to implement it, but I see that the author just added a pretty comprehensive readme. So, tip of the hat to you <a href="https://github.com/jamztang">James Tang</a>!</p>

<h4>Blur everything!</h4>

<p>Blur is another big design thing in iOS7. In a recent project I found myself using <a href="https://github.com/andreamazz/REFrostedViewController">REFrostedViewController</a> to present a side menu. For a more concise menu (e.g.: to present a quick options menu) I use <a href="https://github.com/rnystrom/RNFrostedSidebar">RNFrostedSidebar</a>, another impressive piece of software, clean and effective. You&rsquo;ll find a modified version where you can add labels beneath the items on my <a href="https://github.com/andreamazz/RNFrostedSidebar">github page</a>.<br/>
What about plain views? I happen to use <a href="https://github.com/JagCesar/iOS-blur">JCRBlurView</a> to obtain a fast and effective blur. It&rsquo;s brilliant, it &lsquo;steals&rsquo; the layer from a UIToolBar and makes it its own. I used the same technique in my <a href="https://github.com/andreamazz/AMDraggableBlurView">AMDraggableBlurView</a>.
Wait&hellip; steal a cocoa layer to use in one of your views&hellip; that smells fishy&hellip; and here&rsquo;s the catch: it&rsquo;s been reported that applications that use such method might get refused.<br/>
What I found out is that one of the <a href="https://itunes.apple.com/it/app/palmap-pro/id525999547?mt=8">app that I developed for a client</a> got into the store with no hiccups, but once I opened it from an iPad Mini retina I found out that the blurred view was 100% transparent. No blur, no view, just a transparent container.<br/>
Lesson learned. From now on I&rsquo;ll be using <a href="https://github.com/nicklockwood/FXBlurView">FXBlurView</a>. BTW, if you happen to use the blurred view from <a href="http://canvaspod.io/">Canvas</a> you should know that they use the same method.</p>

<h4>Photo galleries are boring</h4>

<p>They are. It&rsquo;s even worse when you open up a photo, you pinch, you tap away to dismiss it&hellip; been there, done that. <a href="https://github.com/u10int/URBMediaFocusViewController">URBMediaFocusViewController</a> adds a little UIDynamics flavor to the mix, blurs the background and adds some parallax effect, making something simple like viewing a picture a lot more impressive. It also implements asynchronous download of a picture from a remote service and adds a spinner to the thumbnail that triggers the viewer. It&rsquo;s a brilliant piece of software, really.</p>

<h4>Liftoff</h4>

<p><a href="https://github.com/thoughtbot/liftoff">Liftoff</a> is a cool little <em>opinionated</em> tool from the <a href="http://thoughtbot.com/">Thoughtbot</a> guys. In a couple of quick steps you can setup an Xcode project to use:</p>

<ul>
<li>4 spaces indentation level</li>
<li>warning treated as errors</li>
<li>Static Analysis</li>
<li>TODO and FIXME treated as warnings</li>
<li>a precompiled .gitignore and .gitattributes.</li>
</ul>


<p>It also can be used to create a brand new project, reducing the time spent reorganizing stuff to match the common (sense) conventions.<br/>
Using it is easy as pie:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install liftoff
</span><span class='line'>liftoff</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it.</p>

<h4>Take off the boot(strap)s</h4>

<p>That&rsquo;s unrelated to iOS per se, but since I found myself styling the landing page for <a href="http://memento.fancypixel.it">Memento: I know this place</a> I might as well spent a couple of lines on Pure.<br/>
<a href="http://purecss.io/">Pure</a> is a pure css responsive web framework. It&rsquo;s unbelievably tiny, with a 4.5KB footprint, and also modular (so if you just need the grid system, you can just include that along with the base classes). If you have experience with Bootstrap or Zurb, you&rsquo;ll find yourself at home with their grid system and components. It can give a site a breath of fresh air. Checkout their <a href="http://purecss.io/layouts/">layout samples</a>.</p>

<h4>My stuff</h4>

<p>I try to keep myself busy in the iOS open-source community as well, so I&rsquo;ll sign off with the links of the new pods that I developed in the last two months, hoping that they might come in handy:</p>

<ul>
<li><a href="https://github.com/andreamazz/UIView-Shake">UIView+Shake</a>: UIView category that adds a shake animation like the password field of the OsX login screen.</li>
<li><a href="https://github.com/andreamazz/UIView-draggable">UIView+draggable</a>: UIView category that adds dragging capabilities.</li>
<li><a href="https://github.com/andreamazz/AMTagListView">AMTagListView</a>: UIScrollView subclass that allows to add a list of highly customizable tags.</li>
<li><a href="https://github.com/andreamazz/AMScrollingNavbar">AMScrollingNavbar</a>: Scrollable UINavigationBar that follows the scrolling of a UIScrollView, now updated to be integrated as a UIViewController&rsquo;s category.</li>
</ul>


<p>That&rsquo;s all for now.<br/>
Cheers.
Andrea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AMScrollingNavbar: Creating a Cocoapod]]></title>
    <link href="http://andreamazz.github.io/blog/2014/02/01/amscrollingnavbar-creating-a-cocoapod/"/>
    <updated>2014-02-01T12:07:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/02/01/amscrollingnavbar-creating-a-cocoapod</id>
    <content type="html"><![CDATA[<p>This week <a href="https://twitter.com/mattt">Matt Thompson</a> published an interesting article on NSHipster, about <a href="http://nshipster.com/stewardship/">stewardship</a>, which is basically <em>the duty and ethic of public service</em>. Since I&rsquo;ve been trying to be more active in the open source community, I figured I could use this occasion to write an article with the process that I follow when I&rsquo;m writing a new library for iOS. I&rsquo;ll be describing my work on <a href="https://github.com/andreamazz/AMScrollingNavbar">AMScrollingNavbar</a> as an example.</p>

<!-- More -->


<p><code>AMScrollingNavbar</code> is a simple iOS library that lets you implement a <code>UINavigationBar</code> that scrolls out of the way when the user is scrolling the content of the app. You can observe this behavior in Google Chrome, Instagram or Facebook apps. I wanted to integrate something like that on one of the app I&rsquo;m working on, over at <a href="http://www.fancypixel.it">Fancy Pixel</a>, but couldn&rsquo;t find anything that did the job as I intended. What better motivation to do some OSS?</p>

<h3>Writing the code</h3>

<p>In cases like this, writing the code is more a series of trial and error, so instead of TDD I use a more <em>sample driven</em> approach. This means that I just fire up XCode, create a new project and start fiddling around with the SDK. That&rsquo;s the best part of the job.</p>

<p>Letting the <code>UINavigationBar</code> scroll out of the way was fairly easy, I just needed to add a <code>UIGestureRecognizer</code> to the <code>UIScrollView</code> with the content.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">panGesture</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIPanGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handlePan:</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">panGesture</span> <span class="nl">setMaximumNumberOfTouches:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">panGesture</span> <span class="nl">setDelegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span> <span class="nl">addGestureRecognizer:</span><span class="n">self</span><span class="p">.</span><span class="n">panGesture</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>That alone won&rsquo;t do the trick though, we need to override a delegate method of the <code>UIGestureRecognizerDelegate</code> protocol:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldRecognizeSimultaneouslyWithGestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">otherGestureRecognizer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Returning <code>YES</code> in this method will allow both the scrollview and the gesture recognizer to work at the same time. Cool.
Now it&rsquo;s time to stretch <code>UINavigationBar</code>&rsquo;s leg. Here&rsquo;s an abstract of the code that does that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollWithDelta:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">delta</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CGRect</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">delta</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">deltaLimit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">delta</span> <span class="o">=</span> <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">deltaLimit</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">deltaLimit</span><span class="p">,</span> <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">delta</span><span class="p">);</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">updateSizingWithDelta:</span><span class="n">delta</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the <code>UINavigationBar</code> has its own frame, that you can easily modify. Once I got the navigation bar following the scroll view, I needed to enlarge or reduce the scroll views&#8217; frame to leverage all the remaining screen estate. Big chunk of code coming up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateSizingWithDelta:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">delta</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// At this point the navigation bar is already been placed in the right position, it&#39;ll be the reference point for the other views&#39;sizing</span>
</span><span class='line'>  <span class="n">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">updateNavbarAlpha:</span><span class="n">delta</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Move and expand (or shrink) the superview of the given scrollview</span>
</span><span class='line'>  <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">.</span><span class="n">superview</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>  <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">-=</span> <span class="n">delta</span><span class="p">;</span>
</span><span class='line'>  <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+=</span> <span class="n">delta</span><span class="p">;</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">.</span><span class="n">superview</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>  <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">.</span><span class="n">superview</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// if the scrolling view is a UIWebView, we need to adjust its scrollview&#39;s frame.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">UIWebView</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">((</span><span class="n">UIWebView</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">).</span><span class="n">scrollView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Keeps the view&#39;s scroll position steady until the navbar is gone</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">UIScrollView</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[(</span><span class="n">UIScrollView</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span> <span class="nl">setContentOffset:</span><span class="n">CGPointMake</span><span class="p">(((</span><span class="n">UIScrollView</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">).</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="p">((</span><span class="n">UIScrollView</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">).</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">delta</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">UIWebView</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[((</span><span class="n">UIWebView</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">).</span><span class="n">scrollView</span> <span class="nl">setContentOffset:</span><span class="n">CGPointMake</span><span class="p">(((</span><span class="n">UIWebView</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">).</span><span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="p">((</span><span class="n">UIWebView</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">scrollableView</span><span class="p">).</span><span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">delta</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fairly easy to read, kinda tricky to write. The scrollview&rsquo;s height is increased by the scroll&rsquo;s delta, and its origin is shifted up or down of the same amount. With a little reflection I can check wether the scroll view is a normal <code>UIScrollView</code> (and this includes table views) or a <code>UIWebView</code>. The later has its own scroll view, so I need to adjust that instead.<br/>
With the view sizing complete, the last step was to fade out the navigation items. I used a hacky approach, since I wasn&rsquo;t able to set the alpha channel of every nav item, I figured I could just impose an overlay view with the same <code>barTintColor</code>, and change its alpha back and forth:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateNavbarAlpha:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">delta</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Change the alpha channel of every item on the navbr. The overlay will appear, while the other objects will disappear, and vice versa</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">alpha</span> <span class="o">=</span> <span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">deltaLimit</span><span class="p">)</span> <span class="o">/</span> <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">overlay</span> <span class="nl">setAlpha:</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alpha</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">leftBarButtonItems</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIBarButtonItem</span><span class="o">*</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">obj</span><span class="p">.</span><span class="n">customView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">alpha</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItems</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIBarButtonItem</span><span class="o">*</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">obj</span><span class="p">.</span><span class="n">customView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">alpha</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">titleView</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="n">alpha</span><span class="p">;</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">tintColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">tintColor</span> <span class="nl">colorWithAlphaComponent:</span><span class="n">alpha</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that did the trick.</p>

<h3>Getting camera ready</h3>

<p>Once the sample runs like I intended, I step in the refactoring phase. In this step I just take all the code and move it in a reusable object. In this case I opted for a <code>UIViewController</code> that can be subclassed by other developers. I valued the possibility of a category, but since I make an extensive use of instance variables, I preferred the first approach (not a fan of the <code>associatedObject</code> trick).<br/>
The last item on the todo list is the refactoring of the sample project. And we&rsquo;re done.</p>

<h3>Writing the documentation</h3>

<p>An open source project is as good as its documentation is. It helps the first implementation by other devs, and most of all helps them decide wether to use your library or not. In some way it&rsquo;s marketing, without the <em>market</em> part.<br/>
I like to spend some time to add comments following the <a href="http://nshipster.com/documentation/">Appledoc notation</a>. This will provide a comprehensive quick guide in XCode, and also will generate an Apple-like documentation in the <a href="http://cocoadocs.org/docsets/AMScrollingNavbar/0.5.4/Classes/AMScrollingCollectionViewController.html">Cocoapods pages</a>.
As you can see the syntax is easy to write and to understand:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/** Scrolling init method</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Enables the scrolling on a generic UIView.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param scrollableView The UIView where the scrolling is performed.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">followScrollView:</span><span class="p">(</span><span class="n">UIView</span><span class="o">*</span><span class="p">)</span><span class="nv">scrollableView</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then it&rsquo;s time to push all the work on Github, and this calls for a good README file. The README should have a quick description of the library, the setup instructions, the library&rsquo;s documentation or a reference to it, and a screenshot, when possible.</p>

<h4>Screenshot</h4>

<p>Following the principle <em>&ldquo;show, don&rsquo;t tell&rdquo;</em>, screenshots work great, but GIFs are even better. Creating a GIF animation with your sample running is easy as pie, using <a href="http://www.cockos.com/licecap/">LICEcap</a>. Despite its weird name and lowres icon, LICEcap is an invaluable tool, easy to use and extremely versatile, you just fit the portion of the screen that you want to record inside its window, hit record, and you are done.</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-02-01/licecap.png" title="'LICEcap'" ></p>

<p>You might want to resize the output GIF, if you are capturing a big part of the screen, or if you are working on a retina display. <a href="http://www.imagemagick.org/script/index.php">ImageMagick</a> comes to the rescue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>convert big.gif -coalesce temp.gif
</span><span class='line'>convert -size 960x640 temp.gif -resize 480x320 small.gif</span></code></pre></td></tr></table></div></figure>


<h3>Travis CI</h3>

<p><a href="https://travis-ci.org/">Travis CI</a> is a continuous integration tool, used to build and test projects hosted on Github. Having Travis enabled in an open source project is a great way to make sure that your project <em>compiles</em> fine. This is awesome for your new releases (you know before hand if your last commit broke something) and even better for pull requests, since Travis tells you wether a pull request compiles without errors, directly in the github page of the PR.<br/>
To start using Travis, head <a href="https://travis-ci.org/">here</a>, login with Github, and enable your project from the list in your dashboard.<br/>
Enabling Travis with iOS is really easy, it only takes two steps:</p>

<h4>Configure build scheme</h4>

<p>Open your sample project, or the project component that you want to build, and in the Manage Schemes panel, make sure that your project scheme is <code>Shared</code>:
<img class="center" src="http://andreamazz.github.io/images/posts/2014-02-01/schemes.png" title="'Schemes'" ></p>

<h4>Add .travis.yml</h4>

<p>Add a <code>.travis.yml</code> file in your project root. You&rsquo;ll be writing a simple script that will compile your sample project:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: objective-c
</span><span class='line'>install:
</span><span class='line'>- cd ScrollingNavbarDemo
</span><span class='line'>script: xctool -project ScrollingNavbarDemo.xcodeproj -scheme 'ScrollingNavbarDemo' -configuration Release -sdk iphonesimulator7.0 -arch i386 build</span></code></pre></td></tr></table></div></figure>


<p>The <code>install</code> phase just changes the directory to the one containing the project, then our trusty xctool compiles the project. Doesn&rsquo;t get much easier than that.</p>

<p>Once you pushed the new release, the project will be added to the travis compile queue, and you&rsquo;ll receive an email with the result. You can also see the script running in real time, which is awesome.</p>

<h3>Cocoapods</h3>

<p>There is no need to reiterate that <a href="http://cocoapods.org/">Cocoapods</a> is <em>great</em>. The times when you spent precious time configuring a new library in your project are (<a href="http://andreamazz.github.io/blog/2014/01/25/configuring-alljoyn-on-ios/">almost</a>) over. Creating a pod is a matter of minutes, and at the same times provides great value for the community.<br/>
You&rsquo;ll find a pretty extensive guide on the <a href="http://guides.cocoapods.org/making/making-a-cocoapod.html">cocoapods site</a>.
Here&rsquo;s what my podspec looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Pod</span><span class="p">:</span><span class="ss">:Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">name</span>         <span class="o">=</span> <span class="s2">&quot;AMScrollingNavbar&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">version</span>      <span class="o">=</span> <span class="s2">&quot;0.5&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">summary</span>      <span class="o">=</span> <span class="s2">&quot;Scrollable UINavigationBar that follows the scrolling of a UIScrollView. Similiar to Chrome for iOS7&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">homepage</span>     <span class="o">=</span> <span class="s2">&quot;https://github.com/andreamazz/AMScrollingNavbar&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">license</span>      <span class="o">=</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s1">&#39;MIT&#39;</span><span class="p">,</span> <span class="ss">:file</span> <span class="o">=&gt;</span> <span class="s1">&#39;LICENSE&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">author</span>       <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;Andrea Mazzini&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;andrea.mazzini@gmail.com&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source</span>       <span class="o">=</span> <span class="p">{</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://github.com/andreamazz/AMScrollingNavbar.git&quot;</span><span class="p">,</span> <span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s1">&#39;0.5&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">platform</span>     <span class="o">=</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;5.0&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="s1">&#39;AMScrollingNavbar&#39;</span><span class="p">,</span> <span class="s1">&#39;*.{h,m}&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">requires_arc</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the spec is merged in the Spec repo, a new pod is born, and with it the documentation page is also generated.</p>

<h4>Cocoacontrols</h4>

<p><a href="https://www.cocoacontrols.com/">Cocoacontrols</a> is my favorite place to window shop for new libraries. As soon as my pod is ready and I feel that the README is comprehensive enough, I submit my control to cocoacontrols&#8217; review queue. It&rsquo;s a great way to get some visibility from fellow developers, and a great way to discover new controls. A big thanks to <a href="https://www.cocoacontrols.com/about">Aaron, Marine and Bob</a>.</p>

<h3>Maintaining the code</h3>

<p>Once the code is in the wild, it&rsquo;s time to maintain the code. This means answering questions about its use, fixing possible issues and merging the always welcome pull requests. It can become a job of its own at times, but it&rsquo;s a high reward task, since it gives you the chance to experiment more and improve your code quite a lot.<br/>
The only tool that I use is the <code>Issue</code> section of github. I tried once to get into the habit of tracking the issues with <a href="https://waffle.io/">Waffle</a>, but in the end I never really used it efficiently.<br/>
AMScrollingNavbar was well received, and has now (what is for me) a fair amount of stargazers on Github. I&rsquo;d like to thank all the contributors that helped to improve the library, introducing new features and fixing my missteps.</p>

<p>That about wraps up this auto referential post.<br/>
Until next time.<br/>
Andrea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Alljoyn on iOS]]></title>
    <link href="http://andreamazz.github.io/blog/2014/01/25/configuring-alljoyn-on-ios/"/>
    <updated>2014-01-25T11:29:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/01/25/configuring-alljoyn-on-ios</id>
    <content type="html"><![CDATA[<p>Have you ever played <a href="http://www.sleepingbeastgames.com/spaceteam/">Spaceteam</a> on <a href="https://play.google.com/store/apps/details?id=com.sleepingbeastgames.spaceteam">Android</a> or <a href="https://itunes.apple.com/it/app/spaceteam/id570510529?mt=8">iOS</a>? It&rsquo;s a local (cross-platform) multiplayer only game, based on a really cool concept. The players are&hellip; <em>you guessed it&hellip;</em> a space team, and they need to cooperate to keep the spaceship they are traveling on intact through space. This means that you&rsquo;ll be <a href="http://penny-arcade.com/comic/2012/12/31">shouting at your friends</a> commands, and activating various weirdly named knobs and switches.<br/>
While I was researching the tech behind it, I stumbled upon <a href="https://www.alljoyn.org/">Alljoyn</a>, by Qualcomm.</p>

<!-- More -->


<p>Spaceteam uses <a href="https://github.com/tolo/HHServices">HHServices</a> and <a href="https://github.com/roustem/AsyncSocket">AsyncSocket</a>, so the networking protocol was built almost from the ground up by <a href="https://twitter.com/hengineer">its creator</a>. Alljoyn on the other hand promises an opensource <em>&ldquo;universal (cross-platform) software framework that enables interoperability among connected products and software applications across manufacturers to create dynamic proximal networks.&rdquo;</em> And I&rsquo;m all for that.<br/>
The cool thing about it is its ability to seamlessly operate over wifi or over bluetooth (losing the cross-platform ability).
If you login on the Alljoyn site you&rsquo;ll come across the free, opensource, SDK and a bunch of samples. I downloaded the iOS SDK, and started working on my sample.<br/>
What I found out is that the walkthroughs and guides are either not up to date or just wrong. So I figured I could write down what I did to make everything work.<br/>
In this day and age, where cocoapods eases our mind when we need to integrate a third party library, it was a harsh throwback in the world of missing headers and wrong architecture builds.</p>

<h4>Compiling openssl</h4>

<p>If you take a look at Alljoyn&rsquo;s SDK readme you&rsquo;ll notice that the first thing you need to do is compile Openssl for iOS. That&rsquo;s quite easy, and fairly well documented, just head to <a href="https://github.com/sqlcipher/openssl-xcode">Github and clone the openssl-xcode project</a>.<br/>
As stated in the readme you need to download the <a href="http://www.openssl.org/source/">openssl sources</a> and place them in your openssl-xcode project.<br/>
That&rsquo;s how the folder structure should look:</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-01-25/openssl.png" width="760" height="550" title="'openssl'" ></p>

<p>To compile it just open the .xcodeproj file and use XCode&rsquo;s Product &ndash;> Build For &ndash;> Release, or stay in your terminal window and compile it with xctool or xcodebuild, either:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcodebuild -project openssl.xcodeproj -scheme crypto</span></code></pre></td></tr></table></div></figure>


<p>or:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xctool -project openssl.xcodeproj -scheme crypto</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll find the built library in your derived data:</p>

<p><img class="center" src="http://andreamazz.github.io/images/posts/2014-01-25/derived-data.png" title="'built openssl'" ></p>

<p>Just grab <code>Debug-iphoneos</code> and <code>Debug-iphonesimulator</code>, and place them under a <code>build</code> folder, inside your openssl sources. It should look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>☺   ~/openssl/build ll
</span><span class='line'>drwxr-xr-x  5 Andrea  staff  170 21 Gen 23:26 Debug
</span><span class='line'>drwxr-xr-x  5 Andrea  staff  170 21 Gen 23:28 Debug-iphoneos
</span><span class='line'>drwxr-xr-x  5 Andrea  staff  170 21 Gen 23:28 Debug-iphonesimulator</span></code></pre></td></tr></table></div></figure>


<p>Cool, now download and unzip the Alljoyn&rsquo;s SDK.</p>

<h4>New Alljoyn project</h4>

<p>With that out of the way it&rsquo;s time to start working on our project. Fire up Xcode and create a new project.</p>

<h5>Object Model</h5>

<p>We&rsquo;ll start by creating the object that will travel the bus. Alljoyn uses its own XML format to define the object structure. I&rsquo;m not a fan of this format, but that&rsquo;s what we have to work with:</p>

<figure class='code'><figcaption><span>Object model </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xml&gt;</span>
</span><span class='line'>  <span class="nt">&lt;node</span> <span class="na">name=</span><span class="s">&quot;org/alljoyn/Bus/sample&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;annotation</span> <span class="na">name=</span><span class="s">&quot;org.alljoyn.lang.objc&quot;</span> <span class="na">value=</span><span class="s">&quot;SampleObject&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;interface</span> <span class="na">name=</span><span class="s">&quot;org.alljoyn.bus.sample&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;annotation</span> <span class="na">name=</span><span class="s">&quot;org.alljoyn.lang.objc&quot;</span> <span class="na">value=</span><span class="s">&quot;SampleObjectDelegate&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;method</span> <span class="na">name=</span><span class="s">&quot;Concatentate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&quot;str1&quot;</span> <span class="na">type=</span><span class="s">&quot;s&quot;</span> <span class="na">direction=</span><span class="s">&quot;in&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;annotation</span> <span class="na">name=</span><span class="s">&quot;org.alljoyn.lang.objc&quot;</span> <span class="na">value=</span><span class="s">&quot;concatenateString:&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/arg&gt;</span>
</span><span class='line'>              <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&quot;str2&quot;</span> <span class="na">type=</span><span class="s">&quot;s&quot;</span> <span class="na">direction=</span><span class="s">&quot;in&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;annotation</span> <span class="na">name=</span><span class="s">&quot;org.alljoyn.lang.objc&quot;</span> <span class="na">value=</span><span class="s">&quot;withString:&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/arg&gt;</span>
</span><span class='line'>              <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&quot;outStr&quot;</span> <span class="na">type=</span><span class="s">&quot;s&quot;</span> <span class="na">direction=</span><span class="s">&quot;out&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/method&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/interface&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/node&gt;</span>
</span><span class='line'><span class="nt">&lt;/xml&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the basic object that you&rsquo;ll find in the official guide, it defines a simple method that returns two input strings concatenated:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSString*)concatenateString:(NSString*)str1 withString:(NSString*)str2;</span></code></pre></td></tr></table></div></figure>


<p>Cool, now we should run the code generator bundled in the Alljoyn&rsquo;s SDK to generate the Objective-c code.
The generator needs to be compiled, so we&rsquo;ll do that in a couple of clicks.</p>

<h6>Compiling the generator</h6>

<p>Building the generator is pretty straightforward, just head to <code>&lt;AllJoyn SDK Root&gt;/alljoyn_objc/AllJoynCodeGenerator</code> and build with XCode the AllJoynCodeGenerator.xcproj. This will create a /bin folder with the generator excecutable file.</p>

<p>Now the good Alljoyn folks suggest to setup a new target that will allow us to generate with XCode the code. Since I like to keep my targets tidy, and since we have a perfectly fine console, I just skip this step and go the old fashioned way. Just copy the bin/AllJoynCodeGenerator wherever you like, as well with our trusty XML object, and run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./AllJoynCodeGenerator sample_object.xml</span></code></pre></td></tr></table></div></figure>


<p>This will generate:</p>

<pre><code>AJNSampleObject.h
AJNSampleObject.mm
SampleObject.h
SampleObject.m
</code></pre>

<p>Copy these file to your project and add them to your target.</p>

<h5>Build settings</h5>

<p>Now the fun part. We&rsquo;ll need to configure the build settings of our project. What I really like to do is move the AllJoyn&rsquo;s SDK bins and openssl build in the project&rsquo;s root. Two reasons for that:</p>

<ul>
<li><p>I don&rsquo;t have to configure environment variables and link the relative paths</p></li>
<li><p>The project is self contained, so everyone can just clone the project and compile it without firther hassles</p></li>
</ul>


<p>So, here&rsquo;s my folder structure:</p>

<pre><code>☺   ~/code/git/alljoynsample ll
drwxr-xr-x  16 Andrea  staff  544 25 Gen 15:14 AlljoynSample
drwxr-xr-x   5 Andrea  staff  170 25 Gen 15:14 AlljoynSample.xcodeproj
drwxr-xr-x   5 Andrea  staff  170 25 Gen 15:14 AlljoynSampleTests
drwxr-xr-x   5 Andrea  staff  170 25 Gen 15:14 alljoyn-sdk
drwxr-xr-x   4 Andrea  staff  136 25 Gen 15:14 openssl
</code></pre>

<p>Remmeber to remove the unused samples and openssl sources.</p>

<p>Next step, head to your project&rsquo;s build settings tab, and set <code>Build Active Architecture Only</code> to YES.</p>

<p>Below that field, look for <code>Other Linker Flags</code> and set it to <code>-lalljoyn -lajdaemon -lBundledDaemon.o -lssl -lcrypto</code>.</p>

<p>That&rsquo;s where I needed to stop following the official guide, since the path described are wrong.
Head to the <code>Header Search Paths</code> field and enter these:</p>

<pre><code>$(inherited)
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
"$(SRCROOT)/alljoyn-sdk/alljoyn_core/build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/inc"
"$(SRCROOT)/alljoyn-sdk/alljoyn_core/build/darwin/arm/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/inc/alljoyn"
</code></pre>

<p>Then in <code>Library Search Paths</code>:</p>

<pre><code>$(inherited)
"$(SRCROOT)/openssl/build/$(CONFIGURATION)-$(PLATFORM_NAME)"
"$(SRCROOT)/alljoyn-sdk/alljoyn_core/build/darwin/$(CURRENT_ARCH)/$(PLATFORM_NAME)/$(CONFIGURATION)/dist/cpp/lib"
</code></pre>

<p>The $(CURRENT_ARCH) var was key to make the project compile on armv7s devices. That took a while to figure out.</p>

<p>We can now get back to the official guide, setting <code>Enable C++ Exceptions</code> and <code>Enable C++ Runtime Types</code> to NO.</p>

<p>Add <code>-DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN</code> to <em>Other C Flags</em> Debug and <code>-DNS_BLOCK_ASSERTIONS=1 -DQCC_OS_GROUP_POSIX -DQCC_OS_DARWIN</code> to <em>Other C Flags</em> Release.</p>

<h6>Frameworks</h6>

<p>Almost done. We need to take care of the frameworks. Just copy the <code>AllJoynFramework</code> folder from the Alljoyn&rsquo;s SDK in your folder and your project, and make sure to remove the <code>AJNPasswordManager</code> class or you won&rsquo;t be able to compile.
Finish up by linking the static frameworks <code>SystemConfiguration</code> and <code>libstdc++.dylib</code> and we are done.</p>

<p>Hit the trusty <code>⌘B</code> and you should see a succesful build.</p>

<p>Well, that wasn&rsquo;t fun at all, and it sure made me appreciate Cocoapods even more.
Hope this helps anyway.</p>

<p>Until next time.<br/>
Andrea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network Stubs With OHHTTPStubs]]></title>
    <link href="http://andreamazz.github.io/blog/2014/01/10/network-stubs-with-ohhttpstubs/"/>
    <updated>2014-01-10T19:42:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/01/10/network-stubs-with-ohhttpstubs</id>
    <content type="html"><![CDATA[<p>This week I found myself implementing the Google Places&#8217; API in an iOS application, what better occasion to write a post about my favourite iOS stub framework, <a href="https://github.com/AliSoftware/OHHTTPStubs">OHHTTPStubs</a>?</p>

<!-- More -->


<h5>Network stubs</h5>

<p>There are a lot of interesting <a href="http://martinfowler.com/articles/mocksArentStubs.html">articles</a> that explain the philosophy behind stubbing, mocking and their differences. I like the concise definition given by <a href="https://twitter.com/greggpollack">Gregg Pollack</a> in <a href="http://www.codeschool.com/courses/rails-testing-for-zombies">Codeschool&rsquo;s Rails Testing for Zombies</a>:</p>

<blockquote><p>Stubs replace a method with code that returns a specified result, mocks are stubs with an assertion that the method gets called.</p></blockquote>


<p>That being said, when testing network code, stubs are <em>really</em> useful tools to avoid hitting a network resource each time our tests run. This prevents unwanted traffic (and that&rsquo;s nice when you are dealing with API limits) and speeds up our test suite quite a bit.</p>

<h5>Google Places API</h5>

<p>I won&rsquo;t go further in detail with the Google Places&#8217; API, what we need to know is the API&rsquo;s URL and the format of returned JSON object.</p>

<figure class='code'><figcaption><span>API&#8217;s URL </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=&lt;your_api_key>&location=&lt;lat,lng>&sensor=true&radius=500</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  debug_info: [ ],
</span><span class='line'>  html_attributions: [ ],
</span><span class='line'>  next_page_token: "ClRHAAAAFwvsXH5hYznZdQOQ61ZCp7gLZmcRVjy3l5OadZe4gdJNrrZb9xocYXTVHnSM3HKjQ41oBM0j7ImXN21Z6guuGMhpRg9fNOlZbN8vHPp1woYSEHZreMp6Y0xJxlpBYpbcslUaFIQravjfeq49dBvwPHGUQzsQwa9p",
</span><span class='line'>  results: [
</span><span class='line'>      {
</span><span class='line'>      geometry: {
</span><span class='line'>          location: {
</span><span class='line'>              lat: 37.7815533,
</span><span class='line'>              lng: -122.4156427
</span><span class='line'>          },
</span><span class='line'>          viewport: {
</span><span class='line'>              northeast: {
</span><span class='line'>                  lat: 37.7828015,
</span><span class='line'>                  lng: -122.4125167
</span><span class='line'>              },
</span><span class='line'>              southwest: {
</span><span class='line'>                  lat: 37.7741122,
</span><span class='line'>                  lng: -122.4222884
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>      },
</span><span class='line'>      icon: "http://maps.gstatic.com/mapfiles/place_api/icons/geocode-71.png",
</span><span class='line'>      id: "b7fa5ebba26a10513d18e1fd50628f082ffbd1a2",
</span><span class='line'>      name: "Civic Center",
</span><span class='line'>      reference: "CrQBoQAAAHvUxRoSt-y3wsF3Cr6JgGO5Y4Q8nWfthCZLFnApqPO9xmy1NnuQnaZ6BqqE9XPbx8rNKBF-IR7R8C8-8O90pkHjcmoUZKtZscZwbuTYa6RLO5ILIl34AGTh8lbB1cdPtt_NXbkQTQg8eiptx_gzYH8BKg8AKWhYFCN5u9xaE9lXENILw2Ngw_TaUoz1DAAwL6s7uLP3nTQIsO5tOVdsGh3dv2F4ZPck2dHBqD3gPHLSEhArD0KzT3KhPbFWq9UII33pGhSBLiwjfI7y3uOwGS8pkCskS6RK8Q",
</span><span class='line'>      types: [
</span><span class='line'>          "neighborhood",
</span><span class='line'>          "political"
</span><span class='line'>      ],
</span><span class='line'>      vicinity: "San Francisco"
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>  status: "OK"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Great, we have a lot of info, but I really need just <code>name</code> and <code>id</code> in this project.</p>

<h5>Writing the test</h5>

<p>Ok, we figured out how to ask Google for directions and we have our JSON response, next up is our test.</p>

<p>In the last blog post I wrote about my iOS test configuration with Specta. In this project though I&rsquo;ll be using <a href="https://github.com/allending/Kiwi">Kiwi</a>, nothing mayor really changes, just the syntax.</p>

<p>Here&rsquo;s the spec:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">@&quot;fetchSuggestionsForLocation:onSuccess:onFailure&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">context</span><span class="p">(</span><span class="s">@&quot;with valid data&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">it</span><span class="p">(</span><span class="s">@&quot;returns an array&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>          <span class="n">__block</span> <span class="n">NSArray</span><span class="o">*</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">AMPlacesHelper</span> <span class="n">sharedHelper</span><span class="p">]</span> <span class="nl">fetchSuggestionsForLocation:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">){</span><span class="mf">37.7749295</span><span class="p">,</span><span class="o">-</span><span class="mf">122.4194155</span><span class="p">}</span> <span class="nl">onSuccess:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="nl">onFailure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{}];</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="nl">beKindOfClass:</span><span class="p">[</span><span class="n">NSArray</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">theValue</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">count</span><span class="p">))</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="nl">beGreaterThan:</span><span class="n">theValue</span><span class="p">(</span><span class="mi">0</span><span class="p">)];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">it</span><span class="p">(</span><span class="s">@&quot;returns a JSON array of places with a name and id&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>          <span class="n">__block</span> <span class="n">NSArray</span><span class="o">*</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">AMPlacesHelper</span> <span class="n">sharedHelper</span><span class="p">]</span> <span class="nl">fetchSuggestionsForLocation:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">){</span><span class="mf">37.7749295</span><span class="p">,</span><span class="o">-</span><span class="mf">122.4194155</span><span class="p">}</span> <span class="nl">onSuccess:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="nl">onFailure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{}];</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">@&quot;name&quot;</span><span class="p">])</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beNonNil</span><span class="p">];</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">@&quot;id&quot;</span><span class="p">])</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beNonNil</span><span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">context</span><span class="p">(</span><span class="s">@&quot;with invalid data&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">it</span><span class="p">(</span><span class="s">@&quot;returns an error in the failure block&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>          <span class="n">__block</span> <span class="n">NSError</span><span class="o">*</span> <span class="n">resultError</span><span class="p">;</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">AMPlacesHelper</span> <span class="n">sharedHelper</span><span class="p">]</span> <span class="nl">fetchSuggestionsForLocation:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">){</span><span class="mf">37.7749295</span><span class="p">,</span><span class="o">-</span><span class="mf">122.4194155</span><span class="p">}</span> <span class="nl">onSuccess:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{}</span> <span class="nl">onFailure:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">resultError</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}];</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">resultError</span><span class="p">)</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beNonNil</span><span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>  
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty basic stuff, the first test checks that the returned object is an <code>NSArray</code>, and that its content&rsquo;s lenght is greater than 0. The second test checks for the content itself, making sure that <code>id</code> and <code>name</code> are present. The last spec just checks against invalid data, making sure that an error is raised. <code>expectFutureValue</code> waits 1 seconds (by default) before raising the expectation. This is key when dealing with asyncronous calls.</p>

<p>You may point out that it&rsquo;s always a good practice to limit expectations to one per spec, but since these are pretty basic, I figured I could get away with squeezing two of them in the same spec.</p>

<p>Running the test with my trusty xctool script, I see 3 red specs, yay!</p>

<h5>Stubbing the network</h5>

<p>Now we could implement our code and run the test again, hoping for green, but once we manage to make the network call, we&rsquo;ll be hitting the Google Places&#8217; API once for every test run. That&rsquo;s bad, so here enters <a href="https://github.com/AliSoftware/OHHTTPStubs">OHHTTPStubs</a>.</p>

<p>OHHTTPStubs is pretty cool, it lets you register a stub that will listen for any network request and respond with a preset response body and response code. This means that we can easily emulate the network API&rsquo;s behaviour and use it to our likings.
The basic structure of a stub is this one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="nl">stubRequestsPassingTest:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Here you can decide whether to stub the request or not, based for example on the request URL</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="nl">withStubResponse:</span><span class="o">^</span><span class="n">OHHTTPStubsResponse</span><span class="o">*</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Here you return the fake data from your stubbed network call</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">OHHTTPStubsResponse</span> <span class="nl">responseWithJSONObject:</span><span class="err">@</span><span class="p">[</span> <span class="s">@&quot;hello&quot;</span> <span class="p">]</span> <span class="nl">statusCode:</span><span class="mi">200</span> <span class="nl">headers:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;Content-Type&quot;</span><span class="o">:</span> <span class="s">@&quot;application/json&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty nifty. Once we described our test we can then tear down the stubs in an <code>afterAll</code> block:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">afterAll</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="n">removeAllStubs</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Our fixture</h5>

<p>Since I want to stub the Google Places&#8217; API I need to provide a sort of fixture throught OHHTTPStubs. Let&rsquo;s <code>curl</code> the result, and save it to a JSON file that will be served by the stub.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=&lt;your_api_key>&location=&lt;lat,lng>&sensor=true&radius=500 > google_places.json</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s put this file in the test bundle of our iOS application and write the stub for the context <code>with valid data</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">beforeEach</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="nl">stubRequestsPassingTest:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="nl">withStubResponse:</span><span class="o">^</span><span class="n">OHHTTPStubsResponse</span><span class="o">*</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSBundle</span> <span class="o">*</span><span class="n">bundle</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSBundle</span> <span class="nl">bundleForClass:</span><span class="p">[</span><span class="n">self</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="n">OHHTTPStubsResponse</span> <span class="nl">responseWithFileAtPath:</span><span class="p">[</span><span class="n">bundle</span> <span class="nl">pathForResource:</span><span class="s">@&quot;google_places&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;json&quot;</span><span class="p">]</span>
</span><span class='line'>                                              <span class="nl">statusCode:</span><span class="mi">200</span>
</span><span class='line'>                                                 <span class="nl">headers:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;Content-Type&quot;</span><span class="o">:</span> <span class="s">@&quot;application/json&quot;</span><span class="p">}];</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And for the context <code>with invalid data</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">beforeEach</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="nl">stubRequestsPassingTest:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="nl">withStubResponse:</span><span class="o">^</span><span class="n">OHHTTPStubsResponse</span><span class="o">*</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="n">OHHTTPStubsResponse</span> <span class="nl">responseWithData:</span><span class="nb">nil</span> <span class="nl">statusCode:</span><span class="mi">500</span> <span class="nl">headers:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We should be set, let&rsquo;s make sure that our test fail in a meaningful way:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> xctool -workspace Project.xcworkspace -scheme 'Project' -sdk iphonesimulator test
</span><span class='line'>...
</span><span class='line'>'AMPlacesHelper, fetchSuggestionsForLocation：onSuccess：onFailure, with valid data, returns an array' [FAILED], expected subject to be kind of NSArray, got (null)
</span><span class='line'>'AMPlacesHelper, fetchSuggestionsForLocation：onSuccess：onFailure, with valid data, returns a JSON array of places with a name and id' [FAILED], expected subject not to be nil
</span><span class='line'>'AMPlacesHelper, fetchSuggestionsForLocation：onSuccess：onFailure, with invalid data, returns an error in the failure block' [FAILED], expected subject not to be nil</span></code></pre></td></tr></table></div></figure>


<p>Nice! We can now implement the code that will let the test pass, but won&rsquo;t hit the network.</p>

<h5>From red to green</h5>

<p>Let&rsquo;s implement the code that will pass our test. As always, I used <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> to do a quick GET request to the aforementioned API.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">fetchSuggestionsForLocation:</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">)</span><span class="nv">coordinates</span> <span class="nf">onSuccess:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSArray</span><span class="o">*</span> <span class="n">data</span><span class="p">))</span><span class="nv">success</span> <span class="nf">onFailure:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span><span class="o">*</span> <span class="n">error</span><span class="p">))</span><span class="nv">failure</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setNetworkActivityIndicatorVisible:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>  <span class="n">AFHTTPRequestOperationManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPRequestOperationManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSDictionary</span><span class="o">*</span> <span class="n">params</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;key&quot;</span><span class="o">:</span> <span class="n">kGooglePlacesKey</span><span class="p">,</span>
</span><span class='line'>                           <span class="s">@&quot;location&quot;</span><span class="o">:</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%f,%f&quot;</span><span class="p">,</span> <span class="n">coordinates</span><span class="p">.</span><span class="n">latitude</span><span class="p">,</span> <span class="n">coordinates</span><span class="p">.</span><span class="n">longitude</span><span class="p">],</span>
</span><span class='line'>                           <span class="s">@&quot;sensor&quot;</span><span class="o">:</span> <span class="s">@&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>                           <span class="s">@&quot;radius&quot;</span><span class="o">:</span> <span class="s">@&quot;500&quot;</span><span class="p">};</span>
</span><span class='line'>  <span class="p">[</span><span class="n">manager</span> <span class="nl">GET:</span><span class="n">kGooglePlacesURL</span> <span class="nl">parameters:</span><span class="n">params</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setNetworkActivityIndicatorVisible:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">success</span><span class="p">(</span><span class="n">responseObject</span><span class="p">[</span><span class="s">@&quot;results&quot;</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setNetworkActivityIndicatorVisible:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">failure</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">failure</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">failure</span><span class="p">([[</span><span class="n">NSError</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDomain:</span><span class="s">@&quot;googleapi.com&quot;</span> <span class="nl">code:</span><span class="mi">500</span> <span class="nl">userInfo:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;message&quot;</span><span class="o">:</span> <span class="s">@&quot;unable to retrieve places&quot;</span><span class="p">}]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We run our suite again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>** TEST PASSED: 3 passed, 0 failed, 0 errored, 3 total **</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re green. We can turn off Wifi and unplug the ethernet cable, the test will pass anyway.</p>

<p>If we want to test the code with the live feed, we can easily switch the return value for <code>stubRequestsPassingTest</code> in our stubs to <code>NO</code>.</p>

<h5>Debugging stubs</h5>

<p>When using OHHTTPStubs there&rsquo;s one caveat&hellip;</p>

<p>While writing the stub, I did manage to sneak a typo in my stub code, so I was trying to load <code>google.places.json</code> instead of <code>google_places.json</code>. Usually you&rsquo;d find this error pretty easilly, but this time I only noticed that every stubbed spec that was previously green, now was failing with this generic error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Test did not run: the test bundle stopped running or crashed in AMPlacesHelper_FetchSuggestionsForLocationonSuccessonFailure_WithValidData_ReturnsAnArray</span></code></pre></td></tr></table></div></figure>


<p>This can be annoying to debug if you have complex stub and I didn&rsquo;t find any quick solution, beside being careful when writing the stub implementation. I guess that a good rule of thumb here is:</p>

<blockquote><p>keep your stubs as simple as possible</p></blockquote>


<p>This should really apply to every good stub and mock.</p>

<p>Until next time.<br/>
Andrea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Test Setup]]></title>
    <link href="http://andreamazz.github.io/blog/2014/01/06/ios-test-setup/"/>
    <updated>2014-01-06T14:39:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/01/06/ios-test-setup</id>
    <content type="html"><![CDATA[<p>Yesterday I wrote an article with my Rails test setup, so it&rsquo;s right about the time to do the same for iOS. I&rsquo;ll be covering Specta, Expecta and KIF, plus OHHTTPStubs for&hellip; you know&hellip; stubs.</p>

<!-- more -->


<p>First thing first, as you can see from the previous post, I&rsquo;m not really into Cucumber. I have more of a <em>dev-first</em> approach for specs. That&rsquo;s the benefit of working on your own projects: you only have to explain things to yourself, who is usually a pretty cool guy and understands what you&rsquo;re saying. Most of the times at least.
That being said, I&rsquo;m not a fan of the syntax that&rsquo;s <em>behind</em> the nice english-like specs, i.e. lots of regex. Welp!
That brings me to my choice for UI Testing: KIF.
KIF (Keep It Functional) is a pretty neat iOS integration framework, it uses the accessibility attributes embedded in every UIKit object to streamline integration testing. This means that you write your tests in plain old Objective-C, which is a big selling point for me.
Tests won&rsquo;t read in fluid english-like sentences, like they do with Cucumber, but they still remain easy to write and easy to understand, even if your objc-fu is not strong.</p>

<h4>Configuration</h4>

<p>I&rsquo;ll be using <a href="http://www.cocoapods.org/">Cocoapods</a>, of course.
First of all, you should already have a XCTest target ready. Make sure to add another one for the integration tests. I usually callit &lsquo;UI Tests&rsquo;.
Here&rsquo;s the Podfile:</p>

<figure class='code'><figcaption><span>Podfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">target</span> <span class="s2">&quot;Project&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># your pods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">target</span> <span class="s2">&quot;Tests&quot;</span><span class="p">,</span> <span class="ss">:exclusive</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;Specta&#39;</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;Expecta&#39;</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;OHHTTPStubs&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.2&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">target</span> <span class="s1">&#39;UI Tests&#39;</span><span class="p">,</span> <span class="ss">:exclusive</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;KIF&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span><span class="p">,</span> <span class="ss">:inhibit_warnings</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">pod</span> <span class="s1">&#39;OHHTTPStubs&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.2&#39;</span>  
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Feature tests</h5>

<p>After a <code>pod install</code> everything will be ready, so we can <code>open Project.xcworkspace</code>
As for Specta we should already be set, so we can just head to our Tests target and start adding specs. Note that I added also Expecta, to have a RSpec 2 like syntax.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Specta.h&gt;</span>
</span><span class='line'><span class="cp">#define EXP_SHORTHAND</span>
</span><span class='line'><span class="cp">#import &lt;Expecta.h&gt;    </span>
</span><span class='line'>
</span><span class='line'><span class="n">SpecBegin</span><span class="p">(</span><span class="n">Thing</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">@&quot;Something cool&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">@&quot;does something amazing&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">SpecEnd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hit <code>⌘ + U</code> and you should be green.</p>

<h5>Integration tests</h5>

<p>Now, Specta needs no further configurations, but KIF does.
<a href="https://github.com/kif-framework/KIF">KIF documentation</a> suggest to make sure that the Bundle loader and Test Host are correctly configured, but I always found them already set by XCode to the proper values.
Since now XCode ships with XCTest, I had to switch back to <code>octest</code> in the Wrapper Extension property, under Build Settings.
Everything should be ok, let&rsquo;s write a test.</p>

<figure class='code'><figcaption><span>UselessTest.h</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;KIF/KIF.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">UselessTest</span> : <span class="nc">KIFTestCase</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>UselessTest.m</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;UselessTest.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UselessTest</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomething</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">tester</span> <span class="nl">tapScreenAtPoint:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">){</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again <code>⌘ + U</code> and we are good.</p>

<h3>xctool</h3>

<p><a href="https://github.com/facebook/xctool">xctool</a> is a great way to run your tests outside of xcode, and with much better output than xcodebuild. Using it is quite simple, install it via <a href="http://brew.sh/">homebrew</a>:</p>

<pre><code>brew install xctool
</code></pre>

<p>then run your test with it:</p>

<pre><code>xctool -workspace Project.xcworkspace -scheme Project -sdk iphonesimulator test
</code></pre>

<p>That&rsquo;s it.
Until next time.</p>

<p>Cheers</p>

<p>Andrea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Test Setup]]></title>
    <link href="http://andreamazz.github.io/blog/2014/01/05/rails-test-setup/"/>
    <updated>2014-01-05T19:20:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2014/01/05/rails-test-setup</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s how I usually setup my test environment on Rails. I&rsquo;m using mainly RSpec and Capybara, so nothing new under the sun, but this should provide a mindless copy and paste to get you (mainly me) started.</p>

<!-- more -->


<p>First of all, the gems used. This configuration is in part taken from the book <a href="https://leanpub.com/everydayrailsrspec">&ldquo;Testing with RSpec&rdquo;</a> by Aaron Summer:</p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span> <span class="k">if</span> <span class="no">RUBY_PLATFORM</span> <span class="o">=~</span> <span class="sr">/darwin/i</span> <span class="c1"># only on OSX</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;shoulda-matchers&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;faker&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;poltergeist&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>  <span class="c1"># DatabaseCleaner required to test user authentication protected routes</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;launchy&#39;</span> <span class="c1"># Provides the awesome save_and_open_page method in your capybara specs</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A pretty basic setup, RSpec with shoulda matchers, FactoryGirl + Faker for cool mocks and Capybara with Poltergeist as webdriver.</p>

<p>You might want to install PhantomJS (used by Poltergeist). In Mac OSX you can just use brew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install phantomjs</span></code></pre></td></tr></table></div></figure>


<p>With that out of the way the next step is to setup RSpec</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g rspec:install</span></code></pre></td></tr></table></div></figure>


<p>I like to customize rspec with the dotted (or the <code>documentation</code> if I&rsquo;m feeling verbose) and colored notation by adding a .rspec file.</p>

<figure class='code'><figcaption><span>.rspec </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--color --format progress</span></code></pre></td></tr></table></div></figure>


<p>Then I&rsquo;ll customize the generators:</p>

<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">generators</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">test_framework</span> <span class="ss">:rspec</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">fixtures</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">view_specs</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>    <span class="n">helper_specs</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>    <span class="n">routing_specs</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">controller_specs</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="n">request_specs</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">fixture_replacement</span> <span class="ss">:factory_girl</span><span class="p">,</span> <span class="ss">dir</span><span class="p">:</span> <span class="s1">&#39;spec/factories&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see I let the generator create the fixtures (using FactoryGirl) and the controller and routes specs. I create models and request spec manually, and I don&rsquo;t care for view specs.</p>

<p>That&rsquo;s about it for Rails, the next step is to do some adjustments to the spec_helper:</p>

<figure class='code'><figcaption><span>spec/spec_helper_.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../config/environment&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/rails&#39;</span>
</span><span class='line'><span class="c1">#require &#39;rspec/autorun&#39; #removed to support Zeus</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/poltergeist&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/**/*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span><span class="o">.</span><span class="n">check_pending!</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">FactoryGirl</span><span class="p">:</span><span class="ss">:Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">filter_run_excluding</span> <span class="ss">slow</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fixture_path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="o">::</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/fixtures&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:poltergeist</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># DatabaseCleaner required to test user authentication protected routes</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">infer_base_class_for_anonymous_controllers</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="s2">&quot;random&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sets up DatabaseCleaner and the webdriver for Capybara. It also tells  RSpec to skip tests marked as <code>:slow</code>.</p>

<h4>Other goodies</h4>

<p>Almost there, now it&rsquo;s time to setup a couple of tools that makes testing less cumbersome.
First of all, let&rsquo;s setup <a href="https://github.com/guard/guard">Guard</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>guard init rspec</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and that&rsquo;s about it.</p>

<p>Let&rsquo;s finish off by configuring <a href="https://github.com/burke/zeus">Zeus</a> if needed (or wanted). That&rsquo;s pretty straightforward, we just need to change the test environment command in the zeus.json generated by <code>zeus init</code>:</p>

<figure class='code'><figcaption><span>zeus.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;test_environment&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;test_helper&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&quot;test&quot;</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;rspec&quot;</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that should be it, therefore</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">post</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_helpful</span> <span class="c1"># I&#39;m quite the commedian</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open for Business]]></title>
    <link href="http://andreamazz.github.io/blog/2013/11/10/open-for-business/"/>
    <updated>2013-11-10T18:55:00+01:00</updated>
    <id>http://andreamazz.github.io/blog/2013/11/10/open-for-business</id>
    <content type="html"><![CDATA[<p>Hi everyone. This blog is nothing more than a random collection of thoughts and snippets that might be usefull to other developers and, most of all, will be usefull to <em>future</em> me.</p>

<!-- more -->


<p>I&rsquo;m a software engineer, I work most of my time with Objective-C, but I also like to mix stuff up with Ruby and occasionally Android.  I&rsquo;m a co-founder of <a href="http://www.fancypixel.it">Fancy Pixel</a> where I work as developer and UI designer. You can find all my opensource projects on <a href="http://www.github.com/andreamazz">Github</a>.</p>

<p>Cheers,
Andrea.</p>
]]></content>
  </entry>
  
</feed>
